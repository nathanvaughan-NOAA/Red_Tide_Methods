---
title: "Exploring Red Grouper"
format: html
editor: visual
---

## Exploring Red Grouper

My Plan: 

- See how the raw SS model fits into SSMSE
- Revisit the easy SSMSE tutorial and use one of the basic tests with this SS instead of cod
- If it doesn't run, investigate
- If it does run, identify my favorite diagnostic outputs

## Setting up the workspace

I'm going to use here, tidyverse, SSMSE, and r4ss.  

```{r}

#needed if I need to use the merge_catch_bias branch of SSMSE
#remotes::install_github("nmfs-fish-tools/SSMSE@merge_catch_bias")

library(here)
library(tidyverse)
library(SSMSE)
library(r4ss)

#check r4ss version, it's important.  
packageVersion("r4ss")   #1.49.3
packageVersion("SSMSE")   #0.2.8

```

I'm going to set up a directory with all the outputs so that I can decide if I want it on github or not.  

```{r}

# Create a folder for the output in the working directory.
run_SSMSE_dir <- paste0(here(), "/run_SSMSE_dir")
dir.create(run_SSMSE_dir)

```

Next we locate the red grouper ss run.  The tutorial uses develop_OMs() which I assumed was just copying the SS run.  

```{r}

#WARNING: Only run this chunk once, if you try to do it again it will have an Access is denied warning when trying to replace the model folder

red_grouper_mod_path <- file.path(here(),
                                  "SS_models",
                                  "Red grouper",
                                  "version_3.30.18_reverseTB_upfore_expdat")
# develop_OMs will save a model called "cod_SR_BH_steep_1" in the out_dir
# specified
develop_OMs(
  OM_name = "red_grouper",
  OM_in_dir = red_grouper_mod_path, # had to add this to indicate where the SS model is stored
  out_dir = run_SSMSE_dir,
  par_name = "SR_BH_steep", # model steepness in the cod model, I think it's somewhere else in the red grouper model
  par_vals = 0.5, # setting the model steepness to 0.5
  refit_OMs = FALSE, # when this is false, the steepness is just replaced with 1, the model is not conditioned.  
  hess = FALSE
)

#Warning: value 1 is now above upper bound 0.99 for # SR_BH_steep
#Error in check_dir(dir) :
#  The file(s): starter.ss, forecast.ss is/are missing from the directory D:\alexn\Documents\CIMAS\Red_Tide_Methods\run_SSMSE_dir\red_grouper_SR_BH_steep_1, which suggests that it is not a valid #SS directory. Please change to a directory containing a valid SS model.

#I'm getting this error because the files are starter.SS and forecast.SS in uppercase.

# OM model for scenario 2
red_grouper_1_path <- file.path(run_SSMSE_dir, "red_grouper_SR_BH_steep_0.5")


#What happens when you condition a model?  
develop_OMs(
  OM_name = "red_grouper",
  OM_in_dir = red_grouper_mod_path, # had to add this to indicate where the SS model is stored
  out_dir = run_SSMSE_dir,
  par_name = "SR_BH_steep", # model steepness in the cod model, I think it's somewhere else in the red grouper model
  par_vals = 0.75, # setting the model steepness to 1
  refit_OMs = TRUE, # when this is false, the steepness is just replaced with 1, the model is not conditioned.  
  hess = FALSE
)
red_grouper_2_path <- file.path(run_SSMSE_dir, "red_grouper_SR_BH_steep_0.75")

```

SSMSE::develop_OMs() actually changes the parameter and reruns SS.  When refit_OMs = TRUE, it reruns many iterations, when FALSE it only runs once.  

```{r, include=FALSE}

# load the SS models to compare what has changed.  
cod <- SS_output(system.file("extdata", "models", "cod", package = "SSMSE"))
red_1 <- SS_output(red_grouper_1_path)
red_mod <- SS_output(red_grouper_mod_path)

# SR_BH_steep is not in the ss_output() output.  I had to go into ss_summary.sso to find it.  
# the three Report.sso files are different.  

```

After reviewing complex_example and OMvsEM_complex_example, SSMSE::develop_OMs() isn't the only way to generate OMs.  
In the more complex examples, OMs are created in the future_om_list by manipulating the sample_struct.  
For example: create_sample_struct_biased() was created for the RatioBiasEM() work specifically.  

## 1/13/2025 Notes
Today I shifted gears from running red grouper in SSMSE to establishing what will change in the OM. 
I might breifly return to testing red grouper in SSMSE later today if I have too many questions about
the OM.  

I have reviewed the proposal document and the 3 operating models I need to make are as follows:  
1. base (no red tide mortality)
2. red tide causes episodic mortality
3. red tide causes changes in catchability

```{r}
# # below is the code from the complex example that was used for no, low, and high red tide mortality in Doering et al. 2023
# 
# # this code requires a few things that can be standardized.  
# # first is niters which is the number of iterations
# niters = 5
# # length.out needs to be the number of forecast years explored, which for the cod example was 50 years
# nyears = 50
# 
# # put together change for M
# # more stochasisity could be added, but starting with this is still interesting
# template_custom_change <- create_future_om_list(example_type = "custom")
# 
# mod_change_M <- template_custom_change[[1]]
# 
# M_no_scen <- rep(rep(0.2, 50), times = niters)
# M_low_scen <- rep(rep(c(0.2, 0.2, 0.2, 0.2, 0.3), length.out = nyears), times = niters)
# M_hi_scen <- rep(rep(c(0.2, 0.2, 0.2, 0.2, 0.4), length.out = nyears), times = niters)
# M_custom_dataframe <- data.frame(
#   par = "NatM_p_1_Fem_GP_1", 
#   scen = rep(scenarios$scen_name, times = rep(50*niters, 6)), 
#   iter = rep(rep(seq(from = start_iters, to = start_iters + niters - 1), times = rep(nyears, niters)), times = 6), 
#   yr = rep(101:150, times = 6*niters), 
#   value = c(M_no_scen, M_low_scen, M_hi_scen,
#             M_no_scen, M_low_scen, M_hi_scen))
# mod_change_M$pars <- "NatM_p_1_Fem_GP_1"
# mod_change_M$scen <- c("replicate", "all")
# mod_change_M$input <- M_custom_dataframe

#future_OM list only looks at what happens during the forecasted years.  

```

Our OMs won't be as simple as this because 

1. the current stock assessment includes red tide mortality?  

2. we need to define "episodic" mortality, are we using one of Schrippa's models?  

Now I'm looking at the ss_summary files for the parameters we want to change:  

Catchability is here:  
_Catchability
LnQ_base_commHL(1) -8.7423 0 Fix 0.325154
LnQ_base_commLL(2) -8.96192 0 Fix 0.320762
LnQ_base_Rec(4) -7.11499 0 Fix 0.3577
LnQ_base_SEAMAP_Vid(6) -8.73343 0 Fix 0.325331
LnQ_base_SEAMAP_GF(7) -9.82025 0 Fix 0.303595
LnQ_base_NMFS_BLL(8) -8.61852 0 Fix 0.32763
LnQ_base_CBT_PRSurv(9) -9.21632 0 Fix 0.315674
LnQ_base_FWRI_RTD(10) -8.73434 0 Fix 0.325313

We would need to brainstorm how red tide effects catchability.  So I will focus on how 
red tide effects natural mortality.  

Natural Mortality in the cod model is under BIOLOGY, but red grouper appears more complex: 
_BIOLOGY
L_at_Amin_Fem_GP_1 4.84506 0.697323 Act 0.0985912
L_at_Amax_Fem_GP_1 79.995 0 Fix 0.499875
VonBert_K_Fem_GP_1 0.121703 0.00191476 Act 0.286809
CV_young_Fem_GP_1 0.142264 0 Fix 0.711315
CV_old_Fem_GP_1 0.163604 0 Fix 0.818015
Wtlen_1_Fem_GP_1 5.99e-06 0 Fix 0.500001
Wtlen_2_Fem_GP_1 3.25 0 Fix 0.892857
Mat50%_Fem_GP_1 2.8 0 Fix 0.2
Mat_slope_Fem_GP_1 -1.15 0 Fix 0.874242
Eggs_scalar_Fem_GP_1 4.47e-08 0 Fix 0.5
Eggs_exp_len_Fem_GP_1 5.48 0 Fix 1.41333
CohortGrowDev 1 0 Fix 0.0909091
FracFemale_GP_1 0.999999 0 Fix 0.999999

This is because age-specific natural mortality is calculated in the model using the vonB growth.  

There is red tide mortality in the model via a pseudo fleet: 
F_fleet_5_YR_2005_s_1 0.269653 0.103146 Act 0.0929837
F_fleet_5_YR_2014_s_1 0.20391 0.109194 Act 0.0703139

"The selectivity pattern of the red tide pseudo-fishing fleet was specified so that all Red Grouper ages 0 and older were 100% selected for by the red tide, following anecdotal evidence of severe mortality across age classes in the absence of quantitative data to parametrize selectivity." 

Selectivity in the pseudo fleet: 
minage@sel=1_RedTide(5) 0 0 Fix -0.00478469
maxage@sel=1_RedTide(5) 20 0 Fix -1e+06

So technically, the episodic mortality OM would be the base SS model, and the zero mortality OM would remove the 5th fleet.  
Not quite, the future_om_list provides changes that should be made after the end year of the input model.  So if we are assuming the base model is fine and we are only trying to see what happens when we have these changes in the forecast.  


### exploring SS_read_par_3.30()

A lot of the structure building in SSMSE involves the future_om_list, so I'm diving deeper into that analysis.  

```{r}

explore_pars <- SS_readpar_3.30(file.path(red_grouper_mod_path, "ss.par"), file.path(red_grouper_mod_path, "data.ss"), file.path(red_grouper_mod_path, "control.ss"))

# to get this to run I had to: 
# Change dat.ss_new to dat.ss
# Change control.ss_new to control.ss

```

S_parms contains the selectivity parameters
Q_parms contains the catchability parameters
MG_parms contains the biology parameter


So theoretically, if I wanted to make a future OM where the red tide mortality only effected ages 5-20: 

``` {r}
my_future_om_test <- create_future_om_list(list_length = 1)
my_future_om_test[[1]]$pars <- "minage@sel=1_RedTide(5)"
my_future_om_test[[1]]$input$value <- 5
my_future_om_test[[1]]$scen <- c("replicate", "h-1")
```


## 1/14/2025 Can I run the SSMSE?  

Below didn't work.  
```{r}
# 
# develop_OMs(
#   OM_name = "red_grouper",
#   OM_in_dir = red_grouper_mod_path, # had to add this to indicate where the SS model is stored
#   out_dir = run_SSMSE_dir,
#   par_name = "minage@sel=1_RedTide(5)", # minimum age
#   par_vals = 5, # setting the model steepness to 0.5
#   refit_OMs = TRUE, # when this is false, the steepness is just replaced with 1, the model is not conditioned.
#   hess = FALSE
# )
# 
# red_grouper_mod_path_1 <- paste0(run_SSMSE_dir, "red_grouper_minage@sel=1_RedTide(5)")
# 
# datfile <- file.path(red_grouper_mod_path, "red_grouper_1986_2017_RedTideFleet.dat")
# sample_struct_1_scen <- create_sample_struct(dat = datfile, nyrs = 6) 
# 
# sample_struct_1_scen$lencomp <- NULL # don't use length sampling
# 
# sample_struct_list_all <- list("h-ctl" = sample_struct_1_scen, "h-1" = sample_struct_1_scen)
# 
# 
# run_res_path <- file.path(run_SSMSE_dir, "results")
# dir.create(run_res_path)
# 
# res <- run_SSMSE(
#   scen_name_vec = c("h-ctl", "h-1"), # name of the scenario
#   out_dir_scen_vec = run_res_path, # directory in which to run the scenario
#   iter_vec = c(5, 5), # run with 5 iterations each
#   OM_name_vec = NULL, # specify directories instead
#   OM_in_dir_vec = c(red_grouper_mod_path, red_grouper_mod_path_1), # OM files
#   #EM_name_vec = c("cod", "cod"), # cod is included in package data
#   MS_vec = c("EM", "EM"), # The management strategy is specified in the EM
#   nyrs_vec = c(6, 6), # Years to project OM forward
#   nyrs_assess_vec = c(3, 3), # Years between assessments
#   future_om_list = my_future_om_test,
#   run_parallel = FALSE, # Run iterations in parallel
#   sample_struct_list = sample_struct_list_all, # How to sample data for running the EM.
#   sample_struct_hist_list = NULL, # because this is null, will just use sampling
#   # as in the current OM data file for the historical period.
#   seed = 12345
# ) # Set a fixed integer seed that allows replication

```

Can I just do the simple example with the more complex SS?  

```{r}

# Create a folder for the output in the working directory.
run_SSMSE_dir <- paste0(here(), "/run_SSMSE_dir")
dir.create(run_SSMSE_dir)

red_grouper_mod_path <- file.path(here(),
                                  "SS_models",
                                  "Red grouper",
                                  "version_3.30.18_reverseTB_upfore_expdat")# develop_OMs will save a model called "cod_SR_BH_steep_1" in the out_dir

datfile <- file.path(red_grouper_mod_path, "red_grouper_1986_2017_RedTideFleet.dat")
dat <- SS_readdat(datfile)
dat$endyr
dat$styr

# specified
develop_OMs(
  OM_name = "red_grouper",
  OM_in_dir = red_grouper_mod_path, # had to add this to indicate where the SS model is stored
  out_dir = run_SSMSE_dir,
  par_name = "SR_BH_steep", # minimum age
  par_vals = 0.5, # setting the model steepness to 0.5
  refit_OMs = TRUE, # when this is false, the steepness is just replaced with 1, the model is not conditioned.
  hess = FALSE
)
# OM model for scenario 2
red_grouper_1_path <- file.path(run_SSMSE_dir, "red_grouper_SR_BH_steep_0.5")


# Start from a list created by a helper function
template_mod_change <- create_future_om_list()
# add recruitment deviations
rec_dev_specify <- template_mod_change[[1]]
rec_dev_specify$pars <- "rec_devs" # apply change to rec devs
rec_dev_specify$scen <- c("replicate", "all")
# using 1 to 100 means the sd or mean will be calculated by taking the sd across years
# from 1 to 100
rec_dev_specify$input$first_yr_averaging <- dat$styr
rec_dev_specify$input$last_yr_averaging <- dat$endyr


# The following 2 lines suggest that this change is immediately applied in year
# 101, with no transitory period for using sd 0 to the new sd.
rec_dev_specify$input$last_yr_orig_val <- dat$endyr
rec_dev_specify$input$first_yr_final_val <- dat$endyr+1
rec_dev_specify$input$ts_param <- "sd" # this change is for the sd
# no input value needed since it will be calclated from the historical rec devs.
rec_dev_specify$input$value <- NA
rec_dev_specify
## $pars
## [1] "rec_devs"
## 
## $scen
## [1] "replicate" "all"      
## 
## $pattern
## [1] "model_change"
## 
## $input
##   first_yr_averaging last_yr_averaging last_yr_orig_val first_yr_final_val
## 1                  1               100              100                101
##   ts_param   method value
## 1       sd absolute    NA

# put together the change for selectivity (random values around the orig val, with
# an sd of 0.2)
mod_change_sel <- template_mod_change[[1]]
mod_change_sel$scen[2] <- "all" # apply to all scenarios
# The following 2 lines suggest that this change is immediately applied in year
# 101, with no transitory period for using sd 0 to the new sd.
# historical values are NA in this case, because they are not used to determine
# the sd to use.
mod_change_sel$input$last_yr_orig_val <- dat$endyr
mod_change_sel$input$first_yr_final_val <- dat$endyr+1
mod_change_sel$input$ts_param <- "sd" # this change is for the sd
mod_change_sel$input$value <- 0.2 # se to use in the projection period
mod_change_sel
## $pars
## [1] "SizeSel_P_3_Fishery(1)"
## 
## $scen
## [1] "replicate" "all"      
## 
## $pattern
## [1] "model_change"
## 
## $input
##   first_yr_averaging last_yr_averaging last_yr_orig_val first_yr_final_val
## 1                 NA                NA              100                101
##   ts_param   method value
## 1       sd absolute   0.2

future_om_list_recdevs_sel <- list(
  rec_dev_specify
)


sample_struct_1_scen <- create_sample_struct(dat = datfile, nyrs = 6) # note warning
## Warning in FUN(X[[i]], ...): Pattern not found for lencomp: FltSvy 1, Seas 1.
## Returning NA for Yr in this dataframe.
sample_struct_1_scen
## $catch
##    Yr Seas FltSvy    SE
## 1 101    1      1 0.005
## 2 102    1      1 0.005
## 3 103    1      1 0.005
## 4 104    1      1 0.005
## 5 105    1      1 0.005
## 6 106    1      1 0.005
## 
## $CPUE
##    Yr Seas FltSvy  SE
## 1 105    7      2 0.2
## 
## $lencomp
##   Yr Seas FltSvy Sex Part Nsamp
## 1 NA    1      1   0    0   125
## 
## $agecomp
##    Yr Seas FltSvy Sex Part Ageerr Lbin_lo Lbin_hi Nsamp
## 1 105    1      2   0    0      1      -1      -1   500
## 
## $meanbodywt
## [1] NA
## 
## $MeanSize_at_Age_obs
## [1] NA

sample_struct_1_scen$lencomp <- NULL # don't use length sampling

sample_struct_list_all <- list("h-ctl" = sample_struct_1_scen, "h-1" = sample_struct_1_scen)

fore <- r4ss::SS_readforecast(
  file.path(red_grouper_mod_path, "forecast.ss"),
  verbose = FALSE
)
fore$Forecast
## [1] 3
fore$Btarget
## [1] 0.4

fore$BforconstantF
## [1] 0.03
fore$BfornoF
## [1] 0.01

fore$Flimitfraction
## [1] 1

fore$Nforecastyrs
## [1] 1


run_res_path <- file.path(run_SSMSE_dir, "results")
dir.create(run_res_path)
res <- run_SSMSE(
  scen_name_vec = c("h-ctl", "h-1"), # name of the scenario
  out_dir_scen_vec = run_res_path, # directory in which to run the scenario
  iter_vec = c(5, 5), # run with 5 iterations each
  OM_name_vec = NULL, # specify directories instead
  OM_in_dir_vec = c(red_grouper_mod_path, red_grouper_1_path), # OM files
  MS_vec = c("EM", "EM"), # The management strategy is specified in the EM
  nyrs_vec = c(6, 6), # Years to project OM forward
  nyrs_assess_vec = c(3, 3), # Years between assessments
  future_om_list = future_om_list_recdevs_sel,
  run_parallel = FALSE, # Run iterations in parallel
  sample_struct_list = sample_struct_list_all, # How to sample data for running the EM.
  sample_struct_hist_list = NULL, # because this is null, will just use sampling
  # as in the current OM data file for the historical period.
  seed = 12345
) # Set a fixed integer seed that allows replication
future_om_list_recdevs_sel

```