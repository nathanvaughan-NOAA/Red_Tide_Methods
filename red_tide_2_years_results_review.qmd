---
format:
  html:
    toc: true
    toc_location: right
    embed-resources: true
editor: source
execute:
  echo: false
---

## Comparing Future Red Tide Scenarios

For this test run, I took the SEDAR Red Grouper stock assessment and used SSMSE to introduce future red tide events in the OM and EM. There were 6 total scenarios:

1.  No red tide X no red tide: the base stock assessment with red tide events in 2005 and 2014.\
2.  No red tide X 2 red tide: red tide in 2018 and 2021 in the EM.\
3.  2 red tide X 2 red tide: red tide in 2018 and 2021 in the OM and EM.\
4.  2 red tide X no red tide: red tide in 2018 and 2021 in the OM, but not in the EM.


Import the results and summary files from the cloud.

```{r, include = FALSE}
library(tidyverse)
library("nmfspalette")
library(patchwork)
library(knitr)
library(kableExtra)

#name of the OM
OM_name <- "default"
run_SSMSE_dir <- file.path("C:/Users/apn26/Documents/CIMAS/Personal Notes/test_cloud_computing/testing_cloud")
default <- file.path(run_SSMSE_dir, OM_name)

#name of the results files
results_name <- "_rt_2_rerun_om"

#pull the summary and dat files, the dat file isn't actually that important.  
cc_storage <- file.path("C:/Users/apn26/Documents/CIMAS/Personal Notes/cc_storage")
summary <- readRDS(file = file.path(cc_storage, paste0("results_summary", results_name, ".rda")))
dat <- r4ss::SS_readdat(file.path(default, "red_grouper_1986_2017_RedTideFleet.dat"))


#remove "Base" model 
summary$ts <- summary$ts %>%
  filter(model_run != "", !str_detect(model_run, "Base")) %>%
  mutate(end_year = as.numeric(str_extract(model_run, "\\d{4}$")) + 3,
         years_until_terminal = end_year - year) %>%
  filter(case_when(
    str_detect(model_run, "_EM") ~ years_until_terminal > 2,
    TRUE ~ TRUE # Keep all other rows if no _EM
  ))

summary$dq <- summary$dq %>%
  filter(model_run != "", !str_detect(model_run, "Base")) %>%
  mutate(end_year = as.numeric(str_extract(model_run, "\\d{4}$")) + 3,
         years_until_terminal = end_year - year) %>%
  filter(case_when(
    str_detect(model_run, "_EM") ~ years_until_terminal > 2,
    TRUE ~ TRUE # Keep all other rows if no _EM
  ))
summary$scalar <- summary$scalar %>%
  filter(model_run != "", !str_detect(model_run, "Base")) 

#rename the OM if it's different from default
OM_name <- "default_sigmaR"

```

```{r}

scen_list <- unique(summary$ts$scenario)

```

# Raw Data

## Reviewing time series plots

List of the things we can plot with the ts_plot_variable function:

```{r, echo = FALSE}

ts_plot_variable <- function(summary, variable = SpawnBio, run_res_path, save = TRUE) {
  
  # identify the last year sampled by SSMSE
  max_sample_year <- suppressWarnings(  #suppress warning because max removes NAs
    summary$ts$model_run %>% 
      unique() %>% # get the list of unique model runs
      str_sub(-4) %>% # select last 4 characters of EM names
      {
        ifelse(grepl("^\\d{4}$", .), as.numeric(.), NA)
      } %>% # check the last 4 characters are numbers or make NA
      max(na.rm = TRUE) # find the max EM year
  )
  
  # make a list that includes the OM and all max_sample_year EMs  
  key_models <- unique(summary$ts$model_run)
  key_models <- key_models[grepl("OM", key_models) | grepl(as.character(max_sample_year), key_models)]
  
  # set the OM to bright orange, and all the other models to black
  color_values <- setNames(
    ifelse(grepl("OM", key_models), "#D65F00", "black"),
    key_models
  )
  
  var_name <- rlang::as_name(enquo(variable))
  title <- (paste(var_name,"timeseries by scenario"))
  
  ssb_ts_plot <- summary$ts %>% 
    filter(model_run %in% key_models) %>% #filters to just OM and max year runs
     ggplot(aes(x = year, y = {{ variable }})) +
     geom_vline(xintercept = dat$endyr, color = "gray") +
     geom_vline(xintercept = 2005, color = "gray", linetype = "dashed") +
     geom_vline(xintercept = 2014, color = "gray", linetype = "dashed") +
     geom_line( aes(linetype = as.character(iteration), color = model_run))+
     scale_color_manual(values = color_values) +
     scale_linetype_manual(values = rep("solid", 100)) +
     guides(linetype = FALSE) +
     labs(color = "Model Runs") +
     ggtitle(title) +
     facet_wrap(~scenario, labeller = labeller(scenario = function(x) gsub("_", " ", x))) +
     theme_bw()
  
  
  if(save == TRUE){
    ggsave(file.path(run_res_path, "plots", paste0(gsub(" ", "_", title), ".png")),
           width = 8, height = 6, units = "in", device = "png")
  }
  
  return(ssb_ts_plot)
  
}

colnames(summary$ts)

```

Here are the time series plots:

::: panel-tabset
### Red tide mortality

```{r, echo = FALSE, warning = FALSE}
run_res_path <- file.path(run_SSMSE_dir, "results")

ts_plot_variable(summary, F_5, run_res_path, save = TRUE)
```

Figure 1. The fishing mortality of fleet 5 over time.  This line plot demonstrates the frequency and magnitude of red tide events in the EM (black) and OM (orange) for each scenario. All 10 iterations of the OM and EM are plotted simultaneously so peaks are representative of the iteration with the highest value and not the overall trend.  The OMs have fixed magnitudes and the EMs estimate a F_5 that varies in magnitude but has a median close to the fixed value in the OM.  


```{r, echo = FALSE, warning = FALSE}

  max_sample_year <- suppressWarnings(  #suppress warning because max removes NAs
    summary$ts$model_run %>% 
      unique() %>% # get the list of unique model runs
      str_sub(-4) %>% # select last 4 characters of EM names
      {
        ifelse(grepl("^\\d{4}$", .), as.numeric(.), NA)
      } %>% # check the last 4 characters are numbers or make NA
      max(na.rm = TRUE) # find the max EM year
  )
  
  # make a list that includes the OM and all max_sample_year EMs  
  key_models <- unique(summary$ts$model_run)
  key_models <- key_models[grepl("OM", key_models) | grepl(as.character(max_sample_year), key_models)]
  

F_5_summary <- summary$ts %>%
  filter(model_run %in% key_models, F_5 > 0, year > 2017) %>% #this might exclude 0's when there is supposed to be a red tide.  
  group_by(model_run, scenario) %>%
  reframe(mean_F_5 = round(mean(F_5), 3),
          sd_F_5 = round(sd(F_5), 3),
          median_F_5 = round(median(F_5),3))

```

Table 1. A summary of the Operating Model fleet 5 fishing mortality. These statistics only include values where F_5 > 0.   

```{r, echo = FALSE, warning = FALSE}
F_5_summary %>%
  filter(str_detect(model_run, "OM")) %>%
  select(!model_run) %>%
  kable(
    # Rename columns directly within kable
    col.names = c("Scenario", "Mean", "Standard Dev", "Median"),
    align = c("l", "c", "c", "c") # Align columns (left, center, center, center)
  ) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed"), # Add bootstrap styling
    full_width = FALSE # Don't stretch table to full page width
  )
```


Table 2. A summary of the Estimated Model fleet 5 fishing mortality. These statistics only include values where F_5 > 0.   

```{r, echo = FALSE, warning = FALSE}
F_5_summary %>%
  filter(str_detect(model_run, "EM")) %>%
  select(!model_run) %>%
  kable(
    # Rename columns directly within kable
    col.names = c("Scenario", "Mean", "Standard Dev", "Median"),
    align = c("l", "c", "c", "c") # Align columns (left, center, center, center)
  ) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed"), # Add bootstrap styling
    full_width = FALSE # Don't stretch table to full page width
  )
```

### Red tide dead biomass

```{r, echo = FALSE, warning = FALSE}
ts_plot_variable(summary, deadB_5, run_res_path, save = TRUE)
```

Figure 2. The biomass of fish killed by red tide over time.  This line plot demonstrates the biomass removed by red tide.  While fishing mortality is fixed in the OM, the biomass removed can vary depending on the available biomass.  

### Spawning Stock Biomass

```{r, echo = FALSE, warning = FALSE}
ts_plot_variable(summary, SpawnBio, run_res_path, save = TRUE)
```

Figure 3. The spawning stock biomass (SSB) over time.  These plots best demonstrate the effects of the red tide mortality on the spawning availability, with the increased frequency and magnitude of red tides resulting in lower SSB.  

### Retained Biomass

```{r, echo = FALSE, warning = FALSE}

# model run selection: include OM, max year runs
model_names <- tibble(names = unique(summary$ts$model_run))

# select only the max year runs
last_year_models <- model_names %>%
  mutate(
    numbers = str_extract_all(names, "\\d+"), # Extract all numbers as a list of characters
    max_number = sapply(numbers, function(x) max(as.numeric(x))) # Find the max number in each list
  ) %>%  
  filter(max_number == max(max_number, na.rm = TRUE)) %>%
  select(names)

ssb_ts_plot <- summary$ts %>% 
  filter(str_detect(model_run, "OM")|model_run %in% last_year_models$names) %>% #filters to just OM and max year runs
  mutate(retainB_all = select(., starts_with("retainB")) %>% rowSums()) %>%
  ggplot(aes(x = year, y = retainB_all)) +
  geom_vline(xintercept = dat$endyr, color = "gray") +
  geom_line(ggplot2::aes(linetype = as.character(iteration), color = model_run))+
  scale_color_manual(values = c("#D65F00", "black",'blue','green')) +
  scale_linetype_manual(values = rep("solid", 100)) +
  guides(linetype = FALSE) +
  labs(color = "Model Runs") +
  facet_wrap(. ~ scenario, ncol=2, nrow=4) +
  ggtitle("All retained biomass overtime") +
  theme_bw()
ssb_ts_plot

```

Figure 4. The total retained biomass of the fishery over time.  This is the sum of all columns starting with "RetainB" so it does not include discards or red tide mortality.  This plot demonstrates how impactful high mortality events can reduce catch.  

:::

::: panel-tabset

### F_1
```{r, echo = FALSE, warning = FALSE}
ts_plot_variable(summary, F_1, run_res_path, save = TRUE)
```


### F_2
```{r, echo = FALSE, warning = FALSE}
ts_plot_variable(summary, F_2, run_res_path, save = TRUE)
```

### F_4

```{r, echo = FALSE, warning = FALSE}
ts_plot_variable(summary, F_4, run_res_path, save = TRUE)
```

:::

## Reviewing derived quantities

Additional time series plots but derived quantities. Below is a list of all the derived quantity variables:

```{r, echo = FALSE, warning = FALSE}

dq_plot_variable <- function(summary, variable = Value.SSB, run_res_path, save = TRUE) {
  
  # identify the last year sampled by SSMSE
  max_sample_year <- suppressWarnings(  #suppress warning because max removes NAs
    summary$dq$model_run %>% 
      unique() %>% # get the list of unique model runs
      str_sub(-4) %>% # select last 4 characters of EM names
      {
        ifelse(grepl("^\\d{4}$", .), as.numeric(.), NA)
      } %>% # check the last 4 characters are numbers or make NA
      max(na.rm = TRUE) # find the max EM year
  )
  
  # make a list that includes the OM and all max_sample_year EMs  
  key_models <- unique(summary$dq$model_run)
  key_models <- key_models[grepl("OM", key_models) | grepl(as.character(max_sample_year), key_models)]
  
  # set the OM to bright orange, and all the other models to black
  color_values <- setNames(
    ifelse(grepl("OM", key_models), "#D65F00", "black"),
    key_models
  )
  
  var_name <- rlang::as_name(enquo(variable))
  title <- (paste(var_name,"timeseries by scenario"))
  
  ssb_dq_plot <- summary$dq %>% 
    filter(model_run %in% key_models) %>% #filters to just OM and max year runs
     ggplot(aes(x = year, y = {{ variable }})) +
     geom_vline(xintercept = dat$endyr, color = "gray") +
     geom_vline(xintercept = 2005, color = "gray", linetype = "dashed") +
     geom_vline(xintercept = 2014, color = "gray", linetype = "dashed") +
     geom_line( aes(linetype = as.character(iteration), color = model_run))+
     scale_color_manual(values = color_values) +
     scale_linetype_manual(values = rep("solid", 100)) +
     guides(linetype = FALSE) +
     labs(color = "Model Runs") +
     ggtitle(title) +
     facet_wrap(~scenario, labeller = labeller(scenario = function(x) gsub("_", " ", x))) +
     theme_bw()
  
  
  if(save == TRUE){
    ggsave(file.path(run_res_path, "plots", paste0(gsub(" ", "_", title), ".png")),
           width = 8, height = 6, units = "in", device = "png")
  }
  
  return(ssb_dq_plot)
  
}

colnames(summary$dq)


```

::: panel-tabset
### Recruitment

```{r, echo = FALSE, warning = FALSE}
dq_plot_variable(summary, variable = Value.Recr, run_res_path = run_res_path)
```

Figure 5. Recruitment over time by scenario.  Recruitment is determined by the Beverton-Holt equation using steepness, R0, and SigmaR.  Steepness is fixed at 0.99.  R0 and SigmaR were estimated in SEDAR 61 and SEDAR 88.  

### SSB

```{r, echo = FALSE, warning = FALSE}
dq_plot_variable(summary, run_res_path = run_res_path)
```
Figure 6 (same as figure 3). The spawning stock biomass (SSB) over time.  These plots best demonstrate the effects of the red tide mortality on the spawning availability, with the increased frequency and magnitude of red tides resulting in lower SSB.  

### SPR Ratio

```{r, echo = FALSE, warning = FALSE}
dq_plot_variable(summary, variable = Value.SPRratio, run_res_path = run_res_path)
```

Figure 7. The Spawning Potential Ratio (SPR) over time by scenario.  This is the spawning output with fishing:the spawning output without fishing so it is a higher value when the reproductive potential is high.  SPR tends to spike when there is a red tide event.  

### B Ratio

```{r, echo = FALSE, warning = FALSE}
dq_plot_variable(summary, variable = Value.Bratio, run_res_path = run_res_path)
```

Figure 8. The BRatio over time by scenario.  The BRatio is the current SSB over the unfished SSB so the value indicates the status of the SSB relative to a unfished scenario.  This can be usefull if there is a reference point for BRatio like 0.2 as a cut-off for overfished.  Higher frequencies and magnitudes of red tide cause a BRatio less than 0.2 more often.  

### F

```{r, echo = FALSE, warning = FALSE}
dq_plot_variable(summary, variable = Value.F, run_res_path = run_res_path)
```

Figure 9. The total fishing mortality over time by scenario.  The default scenario indicates that fishing over time has low variability.  When Red tide events are introduced,  the variability increases drastically as F includes red tide mortality.  Since red tide is a by-catch fleet, it is included in this value.

:::

# Ratio Time Series

## Fishing mortalities

My new method for plotting EM:OM involves creating separate OM and EM data frames, joining them by year, scenario, and iteration, then dividing the EM value/ OM value for every variable.  That way when plotted it is truly the EM for each model run, year and iteration divided by the OM from the same year and iteration but one model run.  If the om and em value are zero I changed the ratio to 1 because that means that the EM = OM.  

```{r}

#set up the OM and EM dataframes, join them, and calculate the EM:OM ratio for each available value

OM_runs <- summary$ts %>%
  filter(str_detect(model_run, "OM"))
  
EM_runs <- summary$ts %>%
  filter(str_detect(model_run, "EM"))

ratio_df <- left_join(EM_runs, OM_runs,
                      by = c("year", "scenario", "iteration"),
                      suffix = c("_em", "_om")) %>%
  mutate(across(
    .cols = where(is.numeric) & ends_with("_om"),
    .fns = ~ {
      # Get the name of the corresponding '_em' column
      em_col_name <- str_replace(cur_column(), "_om", "_em")
      # Get the value from the '_em' column for the current row
      em_value <- get(em_col_name)
      # Get the value from the current '_om' column (represented by .x)
      om_value <- .x

      # Conditional logic:
      # If both '_em' and '_om' values are 0, set the ratio to 1.
      # Otherwise, perform the division.
      if_else(em_value == 0 & om_value == 0, 1, em_value / om_value)
    },
    .names = "{str_remove(.col, '_om')}_ratio"
  )) %>%
  select(year, scenario, iteration, model_run = model_run_em, ends_with("_ratio"))

```


```{r}

plot_f_ts <- function(scen) {
  
  fleet_ratios <- ratio_df %>%
    filter(
      # only looking at the projection
      year >= 2017,
      # one scenario at a time
      scenario == scen,
      # exclude init
      !str_detect(model_run, "init")
    ) %>% 
    pivot_longer(c(F_1_ratio, F_2_ratio, F_3_ratio, F_4_ratio, F_5_ratio),
                 names_to = "fleet",
                 values_to = "ratio_F") %>%
    mutate(fleet = str_sub(fleet, start = 1, end = 3)) %>%
    select(fleet, year, ratio_F, iteration, model_run) %>%
    mutate(
      end_year = as.numeric(str_extract(model_run, "\\d{4}$"))+3,
      years_until_terminal = end_year - year,
      ratio_F = if_else(fleet == "F_3", 1, ratio_F)
    ) %>%
  mutate( #used to color by final 3 or 6 years.  
    years_group = case_when(
      years_until_terminal <= 3 ~ "0-3",
      years_until_terminal > 3 & years_until_terminal <= 6 ~ "3-6",
      years_until_terminal > 6 ~ "6+",
      TRUE ~ "Other" # This catch-all is good practice
    )
  )
  
  rt_summary <- fleet_ratios %>%
    # Group by year to calculate stats for each year
    group_by(year, fleet) %>%
    # Calculate the median and the 25th/75th percentiles for the ribbon
    reframe(
      median_ratio = median(ratio_F, na.rm = TRUE),
      lower_quartile = quantile(ratio_F, 0.25, na.rm = TRUE),
      upper_quartile = quantile(ratio_F, 0.75, na.rm = TRUE)
    ) 
  
  
  rt_terminal_ratio <- fleet_ratios %>%
    ggplot() +
    geom_point(aes(y = ratio_F, year),
               color = "grey",
               alpha = 0.5) + # Individual points
    # Add the error ribbon using the summary data
    geom_ribbon(
      data = rt_summary,
      aes(year, ymin = lower_quartile, ymax = upper_quartile),
      fill = "lightblue",
      alpha = 0.7
    ) +
    # Add the median line using the summary data
    geom_line(
      data = rt_summary,
      aes(y = median_ratio, year),
      linewidth = 1,
      color = "black"
    ) +
    geom_hline(yintercept = 1, linetype = "dashed") +
    theme(axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    )) +
    ggtitle(scen) +
    ylab("Ratio of F (EM:OM)") + xlab("Years") +
    facet_wrap( ~ fleet) +
    theme_bw()
  
  rt_terminal_ratio
  
}

f_ts_plots <- map(scen_list, plot_f_ts)

```

::: panel-tabset
### No red tide OMxEM

```{r, warning=FALSE}
f_ts_plots[[1]]
```

### No red tide OM x 2 years red tide EM

```{r, warning=FALSE}
f_ts_plots[[2]]
```

### 2 years red tide OM x No red tide EM

```{r, warning=FALSE}
f_ts_plots[[3]]
```

### 2 years red tide OM X 2 years red tide EM

```{r, warning=FALSE}
f_ts_plots[[4]]
```

:::


Figure 10. Each fleet's fishing mortality ratio (EM:OM) over time by scenario.  The line indicates the median and the ribbon is the 25-75% quartiles.  F_5 is consistently underestimated, it is more underestimated in future years where there is less data.  

## F_5

A zoomed in look at just F_5 from the previous plots.  

```{r}

plot_f_ts <- function(scen) {
  
  fleet_ratios <- ratio_df %>%
    filter(
      # only looking at the projection
      year >= 2017,
      # one scenario at a time
      scenario == scen,
      # exclude init
      !str_detect(model_run, "init")
    ) %>% 
    pivot_longer(c(F_1_ratio, F_2_ratio, F_3_ratio, F_4_ratio, F_5_ratio),
                 names_to = "fleet",
                 values_to = "ratio_F") %>%
    mutate(fleet = str_sub(fleet, start = 1, end = 3)) %>%
    select(fleet, year, ratio_F, iteration, model_run) %>%
    mutate(
      end_year = as.numeric(str_extract(model_run, "\\d{4}$"))+3,
      years_until_terminal = end_year - year,
      ratio_F = if_else(fleet == "F_3", 1, ratio_F)
    )
  
  rt_summary <- fleet_ratios %>%
    # Group by year to calculate stats for each year
    group_by(year, fleet) %>%
    # Calculate the median and the 25th/75th percentiles for the ribbon
    reframe(
      median_ratio = median(ratio_F, na.rm = TRUE),
      lower_quartile = quantile(ratio_F, 0.25, na.rm = TRUE),
      upper_quartile = quantile(ratio_F, 0.75, na.rm = TRUE)
    ) %>%
    filter(fleet == "F_5")
  
  
  rt_terminal_ratio <- fleet_ratios %>%
    filter(fleet == "F_5") %>%
    ggplot() +
    geom_point(aes(y = ratio_F, year),
               color = "grey",
               alpha = 0.5) + # Individual points
    # Add the error ribbon using the summary data
    geom_ribbon(
      data = rt_summary,
      aes(year, ymin = lower_quartile, ymax = upper_quartile),
      fill = "lightblue",
      alpha = 0.7
    ) +
    # Add the median line using the summary data
    geom_line(
      data = rt_summary,
      aes(y = median_ratio, year),
      linewidth = 1,
      color = "black"
    ) +
    geom_hline(yintercept = 1, linetype = "dashed") +
    theme(axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    )) +
    ggtitle(scen) +
    ylab("Ratio of F (EM:OM)") + xlab("Years") +
    theme_bw()
  
  rt_terminal_ratio
  
}

f_ts_plots <- map(scen_list, plot_f_ts)

```

::: panel-tabset
### No red tide OMxEM

```{r, warning=FALSE}
f_ts_plots[[1]]
```

### No red tide OM x 2 years red tide EM

```{r, warning=FALSE}
f_ts_plots[[2]]
```

### 2 years red tide OM x No red tide EM

```{r, warning=FALSE}
f_ts_plots[[3]]
```

### 2 years red tide OM X 2 years red tide EM

```{r, warning=FALSE}
f_ts_plots[[4]]
```

:::

Figure 11. Red tide mortality ratio (EM:OM) over time by scenario.  The line indicates the median and the ribbon is the 25-75% quartiles.  Red tide mortality is consistently underestimated, it is more underestimated in future years where there is less data.  


## Biomass

```{r}

plot_biomass_ts <- function(scen) {
  
  fleet_ratios <- ratio_df %>%
    filter(
      # only looking at the projection
      year >= 2017,
      # one scenario at a time
      scenario == scen,
      # exclude init
      !str_detect(model_run, "init")
    ) %>% 
    pivot_longer(c(retainB_1_ratio, retainB_2_ratio, retainB_3_ratio, retainB_4_ratio, deadB_5_ratio),
                 names_to = "fleet",
                 values_to = "ratio_Biomass") %>%
    mutate(fleet = str_sub(fleet, start = 9, end = 9)) %>%
    select(fleet, year, ratio_Biomass, iteration, model_run) %>%
    mutate(
      end_year = as.numeric(str_extract(model_run, "\\d{4}$"))+3,
      years_until_terminal = end_year - year,
      ratio_Biomass = if_else(fleet == "3", 1, ratio_Biomass), 
      fleet = if_else(fleet == "r", "5", fleet)
    )
  
  rt_summary <- fleet_ratios %>%
    # Group by year to calculate stats for each year
    group_by(year, fleet) %>%
    # Calculate the median and the 25th/75th percentiles for the ribbon
    reframe(
      median_ratio = median(ratio_Biomass, na.rm = TRUE),
      lower_quartile = quantile(ratio_Biomass, 0.25, na.rm = TRUE),
      upper_quartile = quantile(ratio_Biomass, 0.75, na.rm = TRUE)
    ) 
  
  
  rt_terminal_ratio <- fleet_ratios %>%
    ggplot() +
    geom_point(aes(y = ratio_Biomass, year),
               color = "grey",
               alpha = 0.5) + # Individual points
    # Add the error ribbon using the summary data
    geom_ribbon(
      data = rt_summary,
      aes(year, ymin = lower_quartile, ymax = upper_quartile),
      fill = "lightblue",
      alpha = 0.7
    ) +
    # Add the median line using the summary data
    geom_line(
      data = rt_summary,
      aes(y = median_ratio, year),
      linewidth = 1,
      color = "black"
    ) +
    geom_hline(yintercept = 1, linetype = "dashed") +
    theme(axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    )) +
    ggtitle(scen) +
    ylab("Ratio of Biomass (EM:OM)") + xlab("Years") +
    facet_wrap(~fleet) +
    theme_bw()
  
  rt_terminal_ratio
  
}

biomass_ts_plots <- map(scen_list, plot_biomass_ts)

```

::: panel-tabset
### No red tide OMxEM

```{r, warning=FALSE}
biomass_ts_plots[[1]]
```

### No red tide OM x 2 years red tide EM

```{r, warning=FALSE}
biomass_ts_plots[[2]]
```

### 2 years red tide OM x No red tide EM

```{r, warning=FALSE}
biomass_ts_plots[[3]]
```

### 2 years red tide OM X 2 years red tide EM

```{r, warning=FALSE}
biomass_ts_plots[[4]]
```

:::

Figure 12. Biomass ratio (EM:OM) over time by scenario.  The line indicates the median and the ribbon is the 25-75% quartiles.  Red tide mortality is consistently underestimated, it is more underestimated in future years where there is less data.  

## Recruitment

```{r, warning=FALSE}
  
  fleet_ratios <- ratio_df %>%
    filter(
      # only looking at the projection
      year >= 2017,
      # one scenario at a time
      # exclude init
      !str_detect(model_run, "init")
    ) %>% 
    select(year, Recruit_0_ratio, iteration, model_run, scenario) %>%
    rename(ratio_recruitment = Recruit_0_ratio) %>%
    mutate(
      end_year = as.numeric(str_extract(model_run, "\\d{4}$"))+3,
      years_until_terminal = end_year - year
    )
  
  rt_summary <- fleet_ratios %>%
    # Group by year to calculate stats for each year
    group_by(year, scenario) %>%
    # Calculate the median and the 25th/75th percentiles for the ribbon
    reframe(
      median_ratio = median(ratio_recruitment, na.rm = TRUE),
      lower_quartile = quantile(ratio_recruitment, 0.25, na.rm = TRUE),
      upper_quartile = quantile(ratio_recruitment, 0.75, na.rm = TRUE)
    ) 
  
  
  recruitment_ratio_plot <- fleet_ratios %>%
    ggplot() +
    geom_point(aes(y = ratio_recruitment, year),
               color = "grey",
               alpha = 0.5) + # Individual points
    # Add the error ribbon using the summary data
    geom_ribbon(
      data = rt_summary,
      aes(year, ymin = lower_quartile, ymax = upper_quartile),
      fill = "lightblue",
      alpha = 0.7
    ) +
    # Add the median line using the summary data
    geom_line(
      data = rt_summary,
      aes(y = median_ratio, year),
      linewidth = 1,
      color = "black"
    ) +
    geom_hline(yintercept = 1, linetype = "dashed") +
    theme(axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    )) +
    ggtitle("Recruitment Ratios") +
    ylab("Ratio of recruitment (EM:OM)") + xlab("Years") +
    ylim(c(0,5))+
    facet_wrap(~scenario) +
    theme_bw()
  
  recruitment_ratio_plot

```

Figure 13. Recruitment ratio (EM:OM) over time by scenario.  The line indicates the median and the ribbon is the 25-75% quartiles.  Recruitment is not over or underestimated, but there are a few outliers where the EM overestimated by 10x.   

## SSB

```{r, warning=FALSE}
  
  fleet_ratios <- ratio_df %>%
    filter(
      # only looking at the projection
      year >= 2017,
      # one scenario at a time
      # exclude init
      !str_detect(model_run, "init")
    ) %>% 
    select(year, SpawnBio_ratio, iteration, model_run, scenario) %>%
    rename(ratio_ssb = SpawnBio_ratio) %>%
    mutate(
      end_year = as.numeric(str_extract(model_run, "\\d{4}$"))+3,
      years_until_terminal = end_year - year
    )
  
  rt_summary <- fleet_ratios %>%
    # Group by year to calculate stats for each year
    group_by(year, scenario) %>%
    # Calculate the median and the 25th/75th percentiles for the ribbon
    reframe(
      median_ratio = median(ratio_ssb, na.rm = TRUE),
      lower_quartile = quantile(ratio_ssb, 0.25, na.rm = TRUE),
      upper_quartile = quantile(ratio_ssb, 0.75, na.rm = TRUE)
    ) 
  
  
  ssb_ratio_plot <- fleet_ratios %>%
    ggplot() +
    geom_point(aes(y = ratio_ssb, year),
               color = "grey",
               alpha = 0.5) + # Individual points
    # Add the error ribbon using the summary data
    geom_ribbon(
      data = rt_summary,
      aes(year, ymin = lower_quartile, ymax = upper_quartile),
      fill = "lightblue",
      alpha = 0.7
    ) +
    # Add the median line using the summary data
    geom_line(
      data = rt_summary,
      aes(y = median_ratio, year),
      linewidth = 1,
      color = "black"
    ) +
    geom_hline(yintercept = 1, linetype = "dashed") +
    theme(axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    )) +
    ggtitle("SSB Ratios") +
    ylab("Ratio of SSB (EM:OM)") + xlab("Years") +
    facet_wrap(~scenario) +
    theme_bw()
  
  ssb_ratio_plot

```

Figure 14. SSB ratio (EM:OM) over time by scenario.  The line indicates the median and the ribbon is the 25-75% quartiles.  SSB is not over or underestimated, but it is more likely to be overestimated, the later years are overestimated.   SSB may spike in response to red tide events based on the red_tide_regular_5_mortality_5 scenario.  

# Terminal Year

Plotting the same ratios as above but by the "time from the terminal year" instead of year.  These plots use mean instead of median because there were too many "years until terminal" with no red tide which skewed to 1 and resulted in straight lines.  F_5 in all of these plots was a straight line when median was used.  

## Fishing Mortality

```{r}

plot_f_ts <- function(scen) {
  
  fleet_ratios <- ratio_df %>%
    filter(
      # only looking at the projection
      year >= 2017,
      # one scenario at a time
      scenario == scen,
      # exclude init
      !str_detect(model_run, "init")
    ) %>% 
    pivot_longer(c(F_1_ratio, F_2_ratio, F_3_ratio, F_4_ratio, F_5_ratio),
                 names_to = "fleet",
                 values_to = "ratio_F") %>%
    mutate(fleet = str_sub(fleet, start = 1, end = 3)) %>%
    select(fleet, year, ratio_F, iteration, model_run) %>%
    mutate(
      end_year = as.numeric(str_extract(model_run, "\\d{4}$"))+3,
      years_until_terminal = end_year - year,
      ratio_F = if_else(fleet == "F_3", 1, ratio_F)
    )
  
  rt_summary <- fleet_ratios %>%
    filter(years_until_terminal > 0) %>%
    # Group by year to calculate stats for each year
    group_by(years_until_terminal, fleet) %>%
    # Calculate the median and the 25th/75th percentiles for the ribbon
    reframe(
      median_ratio = mean(ratio_F, na.rm = TRUE),
      lower_quartile = quantile(ratio_F, 0.25, na.rm = TRUE),
      upper_quartile = quantile(ratio_F, 0.75, na.rm = TRUE)
    ) 
  
  
  rt_terminal_ratio <- fleet_ratios %>%
    filter(years_until_terminal > 0) %>%
    ggplot() +
    geom_point(aes(y = ratio_F, years_until_terminal),
               color = "grey",
               alpha = 0.5) + # Individual points
    # Add the error ribbon using the summary data
    geom_ribbon(
      data = rt_summary,
      aes(years_until_terminal, ymin = lower_quartile, ymax = upper_quartile),
      fill = "lightblue",
      alpha = 0.7
    ) +
    # Add the median line using the summary data
    geom_line(
      data = rt_summary,
      aes(y = median_ratio, years_until_terminal),
      linewidth = 1,
      color = "black"
    ) +
    geom_hline(yintercept = 1, linetype = "dashed") +
    theme(axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    )) +
    ggtitle(scen) +
    ylab("Ratio of F (EM:OM)") + xlab("Years from terminal") +
    facet_wrap( ~ fleet) +
    theme_bw()
  
  rt_terminal_ratio
  
}

f_ts_plots <- map(scen_list, plot_f_ts)

```

::: panel-tabset
### No red tide OMxEM

```{r, warning=FALSE}
f_ts_plots[[1]]
```

### No red tide OM x 2 years red tide EM

```{r, warning=FALSE}
f_ts_plots[[2]]
```

### 2 years red tide OM x No red tide EM

```{r, warning=FALSE}
f_ts_plots[[3]]
```

### 2 years red tide OM X 2 years red tide EM

```{r, warning=FALSE}
f_ts_plots[[4]]
```

:::

Figure 15. Each fleet's fishing mortality ratio (EM:OM) over the years from terminal year by scenario.  The line indicates the mean and the ribbon is the 25-75% quartiles.  F_5 is consistently underestimated, there is higher variation where there is less data.  

## F_5

A zoomed in look at just F_5 from the previous plots.  

```{r}

plot_f_ts <- function(scen) {
  
  fleet_ratios <- ratio_df %>%
    filter(
      # only looking at the projection
      year >= 2017,
      # one scenario at a time
      scenario == scen,
      # exclude init
      !str_detect(model_run, "init")
    ) %>% 
    pivot_longer(c(F_1_ratio, F_2_ratio, F_3_ratio, F_4_ratio, F_5_ratio),
                 names_to = "fleet",
                 values_to = "ratio_F") %>%
    mutate(fleet = str_sub(fleet, start = 1, end = 3)) %>%
    select(fleet, year, ratio_F, iteration, model_run) %>%
    mutate(
      end_year = as.numeric(str_extract(model_run, "\\d{4}$"))+3,
      years_until_terminal = end_year - year,
      ratio_F = if_else(fleet == "F_3", 1, ratio_F)
    )
  
  rt_summary <- fleet_ratios %>%
    filter(years_until_terminal > 0) %>%
    # Group by years_until_terminal to calculate stats for each year
    group_by(years_until_terminal, fleet) %>%
    # Calculate the median and the 25th/75th percentiles for the ribbon
    reframe(
      median_ratio = mean(ratio_F, na.rm = TRUE),
      lower_quartile = quantile(ratio_F, 0.25, na.rm = TRUE),
      upper_quartile = quantile(ratio_F, 0.75, na.rm = TRUE)
    ) %>%
    filter(fleet == "F_5")
  
  
  rt_terminal_ratio <- fleet_ratios %>%
    filter(years_until_terminal > 0) %>%
    filter(fleet == "F_5") %>%
    ggplot() +
    geom_point(aes(y = ratio_F, years_until_terminal),
               color = "grey",
               alpha = 0.5) + # Individual points
    # Add the error ribbon using the summary data
    geom_ribbon(
      data = rt_summary,
      aes(years_until_terminal, ymin = lower_quartile, ymax = upper_quartile),
      fill = "lightblue",
      alpha = 0.7
    ) +
    # Add the median line using the summary data
    geom_line(
      data = rt_summary,
      aes(y = median_ratio, years_until_terminal),
      linewidth = 1,
      color = "black"
    ) +
    geom_hline(yintercept = 1, linetype = "dashed") +
    theme(axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    )) +
    ggtitle(scen) +
    ylab("Ratio of F (EM:OM)") + xlab("Years from terminal") +
    theme_bw()
  
  rt_terminal_ratio
  
}

f_ts_plots <- map(scen_list, plot_f_ts)

```

::: panel-tabset
### No red tide OMxEM

```{r, warning=FALSE}
f_ts_plots[[1]]
```

### No red tide OM x 2 years red tide EM

```{r, warning=FALSE}
f_ts_plots[[2]]
```

### 2 years red tide OM x No red tide EM

```{r, warning=FALSE}
f_ts_plots[[3]]
```

### 2 years red tide OM X 2 years red tide EM

```{r, warning=FALSE}
f_ts_plots[[4]]
```


:::

Figure 16. Red tide mortality ratio (EM:OM) over the years from terminal year by scenario.  The line indicates the mean and the ribbon is the 25-75% quartiles.  F_5 is consistently underestimated, there is higher variation where there is less data.  


## Biomass

```{r}

plot_biomass_ts <- function(scen) {
  
  fleet_ratios <- ratio_df %>%
    filter(
      # only looking at the projection
      year >= 2017,
      # one scenario at a time
      scenario == scen,
      # exclude init
      !str_detect(model_run, "init")
    ) %>% 
    pivot_longer(c(retainB_1_ratio, retainB_2_ratio, retainB_3_ratio, retainB_4_ratio, deadB_5_ratio),
                 names_to = "fleet",
                 values_to = "ratio_Biomass") %>%
    mutate(fleet = str_sub(fleet, start = 9, end = 9)) %>%
    select(fleet, year, ratio_Biomass, iteration, model_run) %>%
    mutate(
      end_year = as.numeric(str_extract(model_run, "\\d{4}$"))+3,
      years_until_terminal = end_year - year,
      ratio_Biomass = if_else(fleet == "3", 1, ratio_Biomass), 
      fleet = if_else(fleet == "r", "5", fleet)
    )
  
  rt_summary <- fleet_ratios %>%
    filter(years_until_terminal > 0) %>%
    # Group by year to calculate stats for each year
    group_by(years_until_terminal, fleet) %>%
    # Calculate the median and the 25th/75th percentiles for the ribbon
    reframe(
      median_ratio = mean(ratio_Biomass, na.rm = TRUE),
      lower_quartile = quantile(ratio_Biomass, 0.25, na.rm = TRUE),
      upper_quartile = quantile(ratio_Biomass, 0.75, na.rm = TRUE)
    ) 
  
  
  rt_terminal_ratio <- fleet_ratios %>%
    filter(years_until_terminal > 0) %>%
    ggplot() +
    geom_point(aes(y = ratio_Biomass, years_until_terminal),
               color = "grey",
               alpha = 0.5) + # Individual points
    # Add the error ribbon using the summary data
    geom_ribbon(
      data = rt_summary,
      aes(years_until_terminal, ymin = lower_quartile, ymax = upper_quartile),
      fill = "lightblue",
      alpha = 0.7
    ) +
    # Add the median line using the summary data
    geom_line(
      data = rt_summary,
      aes(y = median_ratio, years_until_terminal),
      linewidth = 1,
      color = "black"
    ) +
    geom_hline(yintercept = 1, linetype = "dashed") +
    theme(axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    )) +
    ggtitle(scen) +
    ylab("Ratio of Biomass (EM:OM)") + xlab("Years from terminal") +
    facet_wrap(~fleet) +
    theme_bw()
  
  rt_terminal_ratio
  
}

biomass_ts_plots <- map(scen_list, plot_biomass_ts)

```

::: panel-tabset
### No red tide OMxEM

```{r, warning=FALSE}
biomass_ts_plots[[1]]
```

### No red tide OM x 2 years red tide EM

```{r, warning=FALSE}
biomass_ts_plots[[2]]
```

### 2 years red tide OM x No red tide EM

```{r, warning=FALSE}
biomass_ts_plots[[3]]
```

### 2 years red tide OM X 2 years red tide EM

```{r, warning=FALSE}
biomass_ts_plots[[4]]
```


:::

Figure 17. Biomass ratio (EM:OM) over the years from terminal year by scenario.  The line indicates the mean and the ribbon is the 25-75% quartiles.  Red tide mortality is consistently underestimated, it is more underestimated in years where there is less data.  

## Recruitment

```{r, warning=FALSE}

  fleet_ratios <- ratio_df %>%
    filter(
      # only looking at the projection
      year >= 2017,
      # one scenario at a time
      # exclude init
      !str_detect(model_run, "init")
    ) %>% 
    select(year, Recruit_0_ratio, iteration, model_run, scenario) %>%
    rename(ratio_recruitment = Recruit_0_ratio) %>%
    mutate(
      end_year = as.numeric(str_extract(model_run, "\\d{4}$"))+3,
      years_until_terminal = end_year - year
    )
  
  rt_summary <- fleet_ratios %>%
    filter(years_until_terminal > 0 ) %>%
    # Group by year to calculate stats for each year
    group_by(years_until_terminal, scenario) %>%
    # Calculate the median and the 25th/75th percentiles for the ribbon
    reframe(
      median_ratio = mean(ratio_recruitment, na.rm = TRUE),
      lower_quartile = quantile(ratio_recruitment, 0.25, na.rm = TRUE),
      upper_quartile = quantile(ratio_recruitment, 0.75, na.rm = TRUE)
    ) 
  
  
  recruitment_ratio_plot <- fleet_ratios %>%
    filter(years_until_terminal > 0 ) %>%
    ggplot() +
    geom_point(aes(y = ratio_recruitment, years_until_terminal),
               color = "grey",
               alpha = 0.5) + # Individual points
    # Add the error ribbon using the summary data
    geom_ribbon(
      data = rt_summary,
      aes(years_until_terminal, ymin = lower_quartile, ymax = upper_quartile),
      fill = "lightblue",
      alpha = 0.7
    ) +
    # Add the median line using the summary data
    geom_line(
      data = rt_summary,
      aes(y = median_ratio, years_until_terminal),
      linewidth = 1,
      color = "black"
    ) +
    geom_hline(yintercept = 1, linetype = "dashed") +
    theme(axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    )) +
    ggtitle("Recruitment Ratios") +
    ylab("Ratio of recruitment (EM:OM)") + xlab("Years from terminal") +
    facet_wrap(~scenario) +
    theme_bw()
  
  recruitment_ratio_plot

```

Figure 18. Recruitment ratio (EM:OM) over time by scenario.  The line indicates the mean and the ribbon is the 25-75% quartiles.  Recruitment is overestimated in the terminal year of the model run.  

## SSB

```{r, warning=FALSE}
  
  fleet_ratios <- ratio_df %>%
    filter(
      # only looking at the projection
      year >= 2017,
      # one scenario at a time
      # exclude init
      !str_detect(model_run, "init")
    ) %>% 
    select(year, SpawnBio_ratio, iteration, model_run, scenario) %>%
    rename(ratio_ssb = SpawnBio_ratio) %>%
    mutate(
      end_year = as.numeric(str_extract(model_run, "\\d{4}$"))+3,
      years_until_terminal = end_year - year
    )
  
  rt_summary <- fleet_ratios %>%
    filter(years_until_terminal > 0 ) %>%
    # Group by year to calculate stats for each year
    group_by(years_until_terminal, scenario) %>%
    # Calculate the median and the 25th/75th percentiles for the ribbon
    reframe(
      median_ratio = mean(ratio_ssb, na.rm = TRUE),
      lower_quartile = quantile(ratio_ssb, 0.25, na.rm = TRUE),
      upper_quartile = quantile(ratio_ssb, 0.75, na.rm = TRUE)
    ) 
  
  
  ssb_ratio_plot <- fleet_ratios %>%
    filter(years_until_terminal > 0 ) %>%
    ggplot() +
    geom_point(aes(y = ratio_ssb, years_until_terminal),
               color = "grey",
               alpha = 0.5) + # Individual points
    # Add the error ribbon using the summary data
    geom_ribbon(
      data = rt_summary,
      aes(years_until_terminal, ymin = lower_quartile, ymax = upper_quartile),
      fill = "lightblue",
      alpha = 0.7
    ) +
    # Add the median line using the summary data
    geom_line(
      data = rt_summary,
      aes(y = median_ratio, years_until_terminal),
      linewidth = 1,
      color = "black"
    ) +
    geom_hline(yintercept = 1, linetype = "dashed") +
    theme(axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    )) +
    ggtitle("SSB Ratios") +
    ylab("Ratio of SSB (EM:OM)") + xlab("Years from terminal") +
    facet_wrap(~scenario) +
    theme_bw()
  
  ssb_ratio_plot

```

Figure 19. SSB ratio (EM:OM) over the years from the terminal year by scenario.  The line indicates the mean and the ribbon is the 25-75% quartiles.  SSB is underestimated when red tide is introduced, with higher variability in the terminal year of the default model.  

# Management

## Term Plots

::: panel-tabset
```{r}

# identify the last year sampled by SSMSE
max_sample_year <- suppressWarnings(  #suppress warning because max removes NAs
  summary$ts$model_run %>%
    unique() %>% # get the list of unique model runs
    str_sub(-4) %>% # select last 4 characters of EM names
    {
      ifelse(grepl("^\\d{4}$", .), as.numeric(.), NA)
    } %>% # check the last 4 characters are numbers or make NA
    max(na.rm = TRUE) # find the max EM year
)
  
# make a list that includes the OM and all max_sample_year EMs
key_models <- unique(summary$ts$model_run)

color_values <- setNames(ifelse(grepl("OM", key_models), "#D65F00", "black"), key_models)

scen_ts_plots <- function(scen = "default"){

  scen_ts <- summary$ts %>%
    filter(scenario == scen) %>%
    mutate(retainB_all = select(., starts_with("retainB")) %>% rowSums()) %>%
    pivot_longer(cols = c("SpawnBio", "F_5", "retainB_all"),
                 names_to = "variables") %>%
    select(year, value, variables, iteration, model_run)
  
  scen_dq <- summary$dq %>%
    filter(scenario == scen) %>%
    pivot_longer("Value.SPRratio", names_to = "variables") %>%
    select(year, value, variables, iteration, model_run)

  scen_merge <- rbind(scen_ts,scen_dq)
    
t_plot <- scen_merge %>%
  ggplot(aes(x = year, y = value)) +
  geom_line( aes(linetype = as.character(iteration), color = model_run))+
  geom_vline(xintercept = dat$endyr, color = "gray") +
  geom_vline(xintercept = 2005, color = "gray", linetype = "dashed") +
  geom_vline(xintercept = 2014, color = "gray", linetype = "dashed") +
  facet_wrap(~variables, ncol = 1, scales = "free") +
  scale_color_manual(values = color_values) +
  scale_linetype_manual(values = rep("solid", 100)) +
  guides(linetype = FALSE, color = FALSE) +
  labs(color = "Model Runs") +
  ggtitle("", subtitle = "Long-term")+
  theme_bw()

scen_years = c(2020,2023,2026, "OM")

t_plot_short <- scen_merge %>%
  filter(str_detect(model_run, str_c(scen_years, collapse = "|"))) %>%
  ggplot(aes(x = year, y = value)) +
  geom_line( aes(linetype = as.character(iteration), color = model_run))+
  geom_vline(xintercept = dat$endyr, color = "gray") +
  geom_vline(xintercept = 2005, color = "gray", linetype = "dashed") +
  geom_vline(xintercept = 2014, color = "gray", linetype = "dashed") +
  facet_wrap(~variables, ncol = 1, scales = "free") +
  scale_color_manual(values = color_values) +
  scale_linetype_manual(values = rep("solid", 100)) +
  guides(linetype = FALSE, color=FALSE) +
  labs(color = "Model Runs") +
  xlim(2000, 2030)+
  ggtitle(scen, subtitle = "Short-term")+
  theme_bw()

t_plot_short + t_plot
  
}

all_term_plots<- map(unique(summary$ts$scenario), scen_ts_plots)

```

### No red tide OMxEM

```{r, warning=FALSE}
all_term_plots[[1]]
```

### No red tide OM x 2 years red tide EM

```{r, warning=FALSE}
all_term_plots[[2]]
```

### 2 years red tide OM x No red tide EM

```{r, warning=FALSE}
all_term_plots[[3]]
```

### 2 years red tide OM X 2 years red tide EM

```{r, warning=FALSE}
all_term_plots[[4]]
```


:::

Figure 20. Term plots are meant to be a "short term" (2000-2030) and "long term" (1989-2067) look at a few key parameters from the time series dataset.  These plots demonstrate that red tide events correspond with SPR Ratio spikes, and can slowly decrease retained biomass or spawning biomass in the short term.  In the long term, there are no trends.  

## Management Term Plots

::: panel-tabset
```{r}

# identify the last year sampled by SSMSE
max_sample_year <- suppressWarnings(  #suppress warning because max removes NAs
  summary$ts$model_run %>%
    unique() %>% # get the list of unique model runs
    str_sub(-4) %>% # select last 4 characters of EM names
    {
      ifelse(grepl("^\\d{4}$", .), as.numeric(.), NA)
    } %>% # check the last 4 characters are numbers or make NA
    max(na.rm = TRUE) # find the max EM year
)
  
# make a list that includes the OM and all max_sample_year EMs
key_models <- unique(summary$ts$model_run)

color_values <- setNames(ifelse(grepl("OM", key_models), "#D65F00", "grey"), key_models)

scen_ts_plots <- function(scen = "default"){

  scen_ts <- summary$ts %>%
    filter(scenario == scen) %>%
    mutate(retainB_all = select(., starts_with("retainB")) %>% rowSums()) %>%
    pivot_longer(cols = c("SpawnBio", "F_5", "retainB_all"),
                 names_to = "variables") %>%
    select(year, value, variables, iteration, model_run)
  
  scen_dq <- summary$dq %>%
    filter(scenario == scen) %>%
    pivot_longer("Value.SPRratio", names_to = "variables") %>%
    select(year, value, variables, iteration, model_run)

  scen_merge <- rbind(scen_ts,scen_dq)
    
t_plot <- scen_merge %>%
  ggplot(aes(x = year, y = value)) +
  geom_line( aes(linetype = as.character(iteration), color = model_run), alpha = 0.2)+
  stat_summary(fun = median, geom = "line",  aes(color = model_run),  linewidth = 1.2) +
  geom_vline(xintercept = dat$endyr, color = "gray") +
  geom_vline(xintercept = 2005, color = "gray", linetype = "dashed") +
  geom_vline(xintercept = 2014, color = "gray", linetype = "dashed") +
  facet_wrap(~variables, ncol = 1, scales = "free") +
  scale_color_manual(values = color_values) +
  scale_linetype_manual(values = rep("solid", 100)) +
  guides(linetype = FALSE, color = FALSE) +
  labs(color = "Model Runs") +
  ggtitle("", subtitle = "Long-term")+
  theme_bw()

scen_years = c(2020,2023,2026, "OM")

t_plot_short <- scen_merge %>%
  filter(str_detect(model_run, str_c(scen_years, collapse = "|"))) %>%
  ggplot(aes(x = year, y = value)) +
  geom_line( aes(linetype = as.character(iteration), color = model_run))+
  stat_summary(fun = median, geom = "line",  aes(color = model_run),  linewidth = 1.2) +
  geom_vline(xintercept = dat$endyr, color = "gray") +
  geom_vline(xintercept = 2005, color = "gray", linetype = "dashed") +
  geom_vline(xintercept = 2014, color = "gray", linetype = "dashed") +
  facet_wrap(~variables, ncol = 1, scales = "free") +
  scale_color_manual(values = color_values) +
  scale_linetype_manual(values = rep("solid", 100)) +
  guides(linetype = FALSE, color=FALSE) +
  labs(color = "Model Runs") +
  coord_cartesian(xlim=c(2017, 2027))+
  ggtitle(scen, subtitle = "Management Term")+
  theme_bw()

t_plot_short + t_plot
  
}

all_term_plots<- map(unique(summary$ts$scenario), scen_ts_plots)

```

### No red tide OMxEM

```{r, warning=FALSE}
all_term_plots[[1]]
```

### No red tide OM x 2 years red tide EM

```{r, warning=FALSE}
all_term_plots[[2]]
```

### 2 years red tide OM x No red tide EM

```{r, warning=FALSE}
all_term_plots[[3]]
```

### 2 years red tide OM X 2 years red tide EM

```{r, warning=FALSE}
all_term_plots[[4]]
```


:::

Figure 21. Management Term plots are meant to be a "short term" (2000-2027) and "long term" (1989-2067) look at a few key parameters from the time series dataset.  These plots demonstrate that red tide events correspond with SPR Ratio spikes, and can slowly decrease retained biomass or spawning biomass in the short term.  In the long term, there are no trends.  I tried to add median trend lines for the OM and EM but they aren't very clear because of how the lines are colored.  




## Relative Error Plots

Inspired by Wetzel and Punt et al. 2011

I am going to attempt to make their Relative Error Plots.

RE = (E - T) / T

```{r}

OM_means <- summary$ts %>%
  filter(year >= 2017, model_run == paste0(OM_name, "_OM")) %>%
  select(year, Recruit_0, F_5, SpawnBio, iteration, retainB_1, retainB_2, retainB_4, deadB_5, F_1, F_2, F_4) %>%
  rowwise()%>%
  mutate(commercial = sum(retainB_1, retainB_2), recreational = retainB_4, com_f = sum(F_1, F_2), rec_f = F_4) %>%
  group_by(year) %>%
  reframe(OM_Recruit_0 = mean(Recruit_0), OM_F_5 = mean(F_5), OM_SpawnBio = mean(SpawnBio), OM_com = mean(commercial), OM_rec = mean(recreational), OM_dead_5 = mean(deadB_5), OM_com_f = mean(com_f), OM_rec_f = mean(rec_f))

EM_means <- summary$ts %>%
  filter(
    year >= 2017,
    str_detect(model_run, "_EM"),!str_detect(model_run, "init")
  ) %>%
  left_join(OM_means, by = c("year")) %>%
  rowwise()%>%
  mutate(commercial = sum(retainB_1, retainB_2), recreational = retainB_4, com_f = sum(F_1, F_2), rec_f = F_4) %>%
  group_by(scenario) %>%
  mutate(
    re_Recruit_0 = ifelse(
      is.na((Recruit_0 - OM_Recruit_0) / OM_Recruit_0),
      0,
      (Recruit_0 - OM_Recruit_0) / OM_Recruit_0
    ),
    #this put zeros back in.
    re_F_5 = ifelse(is.na((F_5 - OM_F_5) / OM_F_5), 0, (F_5 - OM_F_5) /
                      OM_F_5),
    re_SpawnBio = ifelse(is.na((SpawnBio - OM_SpawnBio) / OM_SpawnBio), 0, (SpawnBio - OM_SpawnBio) /
                      OM_SpawnBio),
        re_com = ifelse(is.na((commercial - OM_com) / OM_com), 0, (commercial - OM_com) /
                      OM_com),
        re_rec = ifelse(is.na((recreational - OM_rec) / OM_rec), 0, (recreational - OM_rec) /
                      OM_rec),
        re_dead_5 = ifelse(is.na((deadB_5 - OM_dead_5) / OM_dead_5), 0, (deadB_5 - OM_dead_5) /
                      OM_dead_5),
        re_com_f = ifelse(is.na((com_f - OM_com_f) / OM_com_f), 0, (com_f - OM_com_f) /
                      OM_com_f),
        re_rec_f = ifelse(is.na((rec_f - OM_rec_f) / OM_rec_f), 0, (rec_f - OM_rec_f) /
                      OM_rec_f),
    end_year = as.numeric(str_extract(model_run, "\\d{4}$"))+3,
    years_until_terminal = end_year - year
  )


```

::: panel-tabset
### Recruitment

```{r}
recruit <- EM_means %>% ggplot(aes(re_Recruit_0, scenario)) +
  geom_boxplot() +
  geom_vline(xintercept = 0)+
  theme_bw() + 
  ggtitle("Recruitment") + xlab("Relative error")
recruit
```

### SpawnBio

```{r}
spawn <- EM_means %>% 
  ggplot(aes(re_SpawnBio, scenario)) +
  geom_boxplot() +
  geom_vline(xintercept = 0) +
  theme_bw()+ 
  ggtitle("SSB") + xlab("Relative error")
spawn
```

### Com F

```{r}

f_com<-EM_means %>% 
  ggplot(aes(re_com_f, scenario)) +
  geom_boxplot() +
  geom_vline(xintercept = 0) +
  theme_bw()+ 
  ggtitle("Commercial Mortality") + xlab("Relative error")
f_com
```

### Rec F

```{r}
f_rec <- EM_means %>% 
  ggplot(aes(re_rec_f, scenario)) +
  geom_boxplot() +
  geom_vline(xintercept = 0) +
  theme_bw()+ 
  ggtitle("Recreational Mortality") + xlab("Relative error")
f_rec
```

### F_5

```{r}
f5 <- EM_means %>% 
  filter(F_5 > 0) %>%
  ggplot(aes(re_F_5, scenario)) +
  geom_boxplot() +
  geom_vline(xintercept = 0) +
  theme_bw()+ 
  ggtitle("Red Tide Mortality (F_5)") + xlab("Relative error")
f5
```

### Com Catch

```{r}
com_c <- EM_means %>% 
  ggplot(aes(re_com, scenario)) +
  geom_boxplot() +
  geom_vline(xintercept = 0) +
  theme_bw()+ 
  ggtitle("Commercial Catch (Biomass)") + xlab("Relative error")
com_c
```

### Rec Catch

```{r}

rec_c <- EM_means %>% 
  ggplot(aes(re_rec, scenario)) +
  geom_boxplot() +
  geom_vline(xintercept = 0) +
  theme_bw()+ 
  ggtitle("Recreational Catch (Biomass)") + xlab("Relative error")
rec_c
```

### Red Tide Discards

```{r}

rt_c <-EM_means %>% 
  filter(F_5 > 0) %>%
  ggplot(aes(re_dead_5, scenario)) +
  geom_boxplot() +
  geom_vline(xintercept = 0) +
  theme_bw()+ 
  ggtitle("Red Tide Discards (Biomass)") + xlab("Relative error")
rt_c
```
:::

Figure 21. Relative error plots for each variable of interest zoomed in.  

```{r}
recruit <- recruit +
  theme(axis.text.y = element_blank()) 
f_rec <- f_rec +
  theme(axis.text.y = element_blank()) + ggtitle("Rec F")
f5 <- f5 +
  theme(axis.text.y = element_blank()) + ggtitle("F_5")
rec_c <- rec_c +
  theme(axis.text.y = element_blank()) + ggtitle("Rec catch")
rt_c <- rt_c +
  theme(axis.text.y = element_blank()) + ggtitle("RT catch")
spawn <- spawn 
f_com <- f_com  + ggtitle("Com F")
com_c <- com_c  + ggtitle("Com catch")

(spawn + recruit) / (f_com + f_rec + f5) / (com_c + rec_c + rt_c)

```

Figure 22. Relative error plots of each variable of interest on the same patchwork.   

```{r, warning = FALSE, message =FALSE}
recruit <- recruit +
  theme(axis.text.y = element_blank()) + xlim(-2,5)
f_rec <- f_rec +
  theme(axis.text.y = element_blank()) + xlim(-2,5)+ ggtitle("Rec F")
f5 <- f5 +
  theme(axis.text.y = element_blank()) + xlim(-2,5)+ ggtitle("F_5")
rec_c <- rec_c +
  theme(axis.text.y = element_blank()) + xlim(-2,5)+ ggtitle("Rec catch")
rt_c <- rt_c +
  theme(axis.text.y = element_blank()) + xlim(-2,5)+ ggtitle("RT catch")
spawn <- spawn + xlim(-2,5)
f_com <- f_com + xlim(-2,5) + ggtitle("Com F")
com_c <- com_c + xlim(-2,5) + ggtitle("Com catch")

(spawn + recruit) / (f_com + f_rec + f5) / (com_c + rec_c + rt_c)

```

Figure 23. Relative error plots of each variable of interest with fixed x-limits between -2 and 5.  

## Red Tide Magnitudes and Frequencies

The sums and counts of each red tide treatment to see which are comparable.  

```{r}

#calculate the "magnitude" of red tides

red_tide_magnitudes <- summary$ts %>% 
  filter(year >= 2017, 
         str_detect(model_run, "_EM"),
         !str_detect(model_run, "init")) %>%
  group_by(scenario) %>%
  reframe(F_5_sum = sum(F_5), 
          catch_sum = sum(deadB_5))

red_tide_years <- summary$ts %>% 
  filter(year >= 2017, 
         F_5 > 0,
         model_run == paste0(OM_name, "_OM"), 
         iteration == 1) %>% 
  group_by(scenario) %>%
  reframe(n_years = n_distinct(year)) %>%
  ungroup() %>%
  right_join(red_tide_magnitudes, join_by(scenario))

red_tide_years
```

Table 3. The magnitudes and frequencies of each scenario with the summarized catch to demonstrate scale differences.  

## MAPE

Mean Average Percentage Error

Inspired by 

```{r}

OM_means <- summary$ts %>%
  filter(model_run == paste0(OM_name, "_OM")) %>%
  select(scenario, year, Recruit_0, F_5, SpawnBio, iteration, retainB_1, retainB_2, retainB_4, deadB_5, F_1, F_2, F_4, Bio_smry) %>%
  rowwise() %>%
  mutate(commercial = sum(retainB_1, retainB_2), recreational = retainB_4, com_f = sum(F_1, F_2), rec_f = F_4) %>%
  rename(
    OM_Recruit_0 = Recruit_0,
    OM_F_5 = F_5,
    OM_SpawnBio = SpawnBio, 
    OM_com = commercial, 
    OM_rec = recreational, 
    OM_dead_5 = deadB_5,
    OM_com_f = com_f, 
    OM_rec_f = rec_f,
    OM_abundance = Bio_smry
  )

EM_means_re <- summary$ts %>%
  filter(
    str_detect(model_run, "_EM_2047")) %>%
  rowwise()%>%
  mutate(commercial = sum(retainB_1, retainB_2), recreational = retainB_4, com_f = sum(F_1, F_2), rec_f = F_4) %>%
  left_join(OM_means, by = c("year", "scenario", "iteration")) %>%
  group_by(scenario, iteration, year) %>%
  mutate(
    re_Recruit_0 = ifelse(
      is.na((Recruit_0 - OM_Recruit_0) / OM_Recruit_0),
      0,
      (Recruit_0 - OM_Recruit_0) / OM_Recruit_0
    ),
    #this put zeros back in.
    re_F_5 = ifelse(is.na((F_5 - OM_F_5) / OM_F_5), 0, (F_5 - OM_F_5) /
                      OM_F_5),
    re_SpawnBio = ifelse(is.na((SpawnBio - OM_SpawnBio) / OM_SpawnBio), 0, (SpawnBio - OM_SpawnBio) /
                      OM_SpawnBio),
        re_com = ifelse(is.na((commercial - OM_com) / OM_com), 0, (commercial - OM_com) /
                      OM_com),
        re_rec = ifelse(is.na((recreational - OM_rec) / OM_rec), 0, (recreational - OM_rec) /
                      OM_rec),
        re_dead_5 = ifelse(is.na((deadB_5 - OM_dead_5) / OM_dead_5), 0, (deadB_5 - OM_dead_5) /
                      OM_dead_5),
        re_com_f = ifelse(is.na((com_f - OM_com_f) / OM_com_f), 0, (com_f - OM_com_f) /
                      OM_com_f),
        re_rec_f = ifelse(is.na((rec_f - OM_rec_f) / OM_rec_f), 0, (rec_f - OM_rec_f) /
                      OM_rec_f),        
        re_abundance = ifelse(is.na((Bio_smry - OM_abundance) / OM_abundance), 0, (Bio_smry - OM_abundance) /
                      OM_abundance),
    end_year = as.numeric(str_extract(model_run, "\\d{4}$"))+3,
    years_until_terminal = end_year - year
  )

EM_means <- summary$ts %>%
  filter(
    str_detect(model_run, "_EM_2047")) %>%
  rowwise()%>%
  mutate(commercial = sum(retainB_1, retainB_2), recreational = retainB_4, com_f = sum(F_1, F_2), rec_f = F_4) %>%
  left_join(OM_means, by = c("year", "scenario", "iteration")) %>%
  group_by(scenario, iteration, year) %>%
  mutate(
    re_Recruit_0 = ifelse(
      is.na((Recruit_0 - OM_Recruit_0) / OM_Recruit_0),
      0,
      abs((Recruit_0 - OM_Recruit_0) / OM_Recruit_0)*100
    ),
    #this put zeros back in.
    re_F_5 = ifelse(is.na((F_5 - OM_F_5) / OM_F_5), 0, abs((F_5 - OM_F_5) /
                      OM_F_5))*100,
    re_SpawnBio = ifelse(is.na((SpawnBio - OM_SpawnBio) / OM_SpawnBio), 0, abs((SpawnBio - OM_SpawnBio) /
                      OM_SpawnBio))*100,
        re_com = ifelse(is.na((commercial - OM_com) / OM_com), 0, abs((commercial - OM_com) /
                      OM_com))*100,
        re_rec = ifelse(is.na((recreational - OM_rec) / OM_rec), 0, abs((recreational - OM_rec) /
                      OM_rec))*100,
        re_dead_5 = ifelse(is.na((deadB_5 - OM_dead_5) / OM_dead_5), 0, abs((deadB_5 - OM_dead_5) /
                      OM_dead_5))*100,
        re_com_f = ifelse(is.na((com_f - OM_com_f) / OM_com_f), 0, abs((com_f - OM_com_f) /
                      OM_com_f))*100,
        re_rec_f = ifelse(is.na((rec_f - OM_rec_f) / OM_rec_f), 0, abs((rec_f - OM_rec_f) /
                      OM_rec_f))*100,        
        re_abundance = ifelse(is.na((Bio_smry - OM_abundance) / OM_abundance), 0, abs(Bio_smry - OM_abundance) /
                      OM_abundance)*100,
    end_year = as.numeric(str_extract(model_run, "\\d{4}$"))+3,
    years_until_terminal = end_year - year
  )


```

::: panel-tabset

### SSB and Catch, all years

```{r, warning = FALSE, message =FALSE}
EM_means %>%
  mutate(
    em_model = ifelse(scenario %in% c("no_rt", "rt_2_x_no_rt"), "No Red Tide", "2 Years Red Tide"),
    om_model = ifelse(scenario %in% c("no_rt", "no_rt_x_rt_2"), "No Red Tide", "2 Years Red Tide")
  ) %>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_SpawnBio, re_com, re_rec, re_abundance),
    names_to = "variable",
    values_to = "value",
    names_transform = list(
      variable = ~recode(
        .x,
        "re_SpawnBio" = "Spawning Biomass",
        "re_com" = "Commercial Catch",
        "re_rec" = "Recreational Catch",
        "re_abundance" = "Abundance"
      )
  )) %>%
  ggplot(aes(year, value)) +
  geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  stat_summary(fun = mean, geom = "line", aes(color = em_model), linewidth = 1) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", aes(fill = em_model), alpha = 0.3) +
  facet_grid(om_model~variable) +
  theme_bw()+ 
  coord_cartesian(xlim = c(1986, 2044)) +
  labs(color = "EM", fill = "EM", x = "Year", y = "Estimation Error (MAPE)")
```

### RT, all years

```{r, warning = FALSE, message =FALSE}
EM_means %>%
  mutate(
    em_model = ifelse(scenario %in% c("no_rt", "rt_2_x_no_rt"), "No Red Tide", "2 Years Red Tide"),
    om_model = ifelse(scenario %in% c("no_rt", "no_rt_x_rt_2"), "No Red Tide", "2 Years Red Tide")
  ) %>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_dead_5, re_F_5),
    names_to = "variable",
    values_to = "value"
  ) %>%
  ggplot(aes(year, value)) +
  stat_summary(fun = mean, geom = "line", aes(color = em_model), linewidth = 1) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", aes(fill = em_model), alpha = 0.3) +
  facet_grid(om_model~variable) +
  theme_bw() +
  labs(color = "EM", fill = "EM", x = "Year", y = "Estimation Error (MAPE)")

```

### SSB and Catch, 1980-2030

```{r, warning = FALSE, message =FALSE}
EM_means %>%
  mutate(
    em_model = ifelse(scenario %in% c("no_rt", "rt_2_x_no_rt"), "No Red Tide", "2 Years Red Tide"),
    om_model = ifelse(scenario %in% c("no_rt", "no_rt_x_rt_2"), "No Red Tide", "2 Years Red Tide")
  ) %>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_SpawnBio, re_com, re_rec, re_abundance),
    names_to = "variable",
    values_to = "value",
    names_transform = list(
      variable = ~recode(
        .x,
        "re_SpawnBio" = "Spawning Biomass",
        "re_com" = "Commercial Catch",
        "re_rec" = "Recreational Catch",
        "re_abundance" = "Abundance"
      )
  )) %>%
  ggplot(aes(year, value)) +
  geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  stat_summary(fun = mean, geom = "line", aes(color = em_model), linewidth = 1) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", aes(fill = em_model), alpha = 0.3) +
  facet_grid(om_model~variable) +
  theme_bw()+ 
  xlim(1980, 2030)+
  labs(color = "EM", fill = "EM", x = "Year", y = "Estimation Error (MAPE)")
```

### RT, 1980-2030

```{r, warning = FALSE, message =FALSE}
EM_means %>%
  mutate(
    em_model = ifelse(scenario %in% c("no_rt", "rt_2_x_no_rt"), "No Red Tide", "2 Years Red Tide"),
    om_model = ifelse(scenario %in% c("no_rt", "no_rt_x_rt_2"), "No Red Tide", "2 Years Red Tide")
  ) %>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_dead_5, re_F_5),
    names_to = "variable",
    values_to = "value"
  ) %>%
  ggplot(aes(year, value)) +
  stat_summary(fun = mean, geom = "line", aes(color = em_model), linewidth = 1) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", aes(fill = em_model), alpha = 0.3) +
  facet_grid(om_model~variable) +
  theme_bw() +
  xlim(1980, 2030)+
  labs(color = "EM", fill = "EM", x = "Year", y = "Estimation Error (MAPE)")
```

### SSB and Catch, 2000-2025


```{r, warning = FALSE, message =FALSE}
EM_means %>%
  mutate(
    em_model = ifelse(scenario %in% c("no_rt", "rt_2_x_no_rt"), "No Red Tide", "2 Years Red Tide"),
    om_model = ifelse(scenario %in% c("no_rt", "no_rt_x_rt_2"), "No Red Tide", "2 Years Red Tide")
  ) %>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_SpawnBio, re_com, re_rec, re_abundance),
    names_to = "variable",
    values_to = "value",
    names_transform = list(
      variable = ~recode(
        .x,
        "re_SpawnBio" = "Spawning Biomass",
        "re_com" = "Commercial Catch",
        "re_rec" = "Recreational Catch",
        "re_abundance" = "Abundance"
      )
  )) %>%
  ggplot(aes(year, value)) +
  geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  stat_summary(fun = mean, geom = "line", aes(color = em_model), linewidth = 1) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", aes(fill = em_model), alpha = 0.3) +
  facet_grid(om_model~variable) +
  theme_bw()+ 
  xlim(2000, 2025)+
  labs(color = "EM", fill = "EM", x = "Year", y = "Estimation Error (MAPE)")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

Notes: 
When there is no red tide in the OM, a matching EM results in less error in 2018 and a higher error in 2021.  When there is a red tide in the OM, a matching EM results in less error in 2018 and more error in 2021.  

Misspecifying the model does not increase the error, instead there is more error in 2021 and less error in 2018.  



### RT, 2000-2025

```{r, warning = FALSE, message =FALSE}
EM_means %>%
  mutate(
    em_model = ifelse(scenario %in% c("no_rt", "rt_2_x_no_rt"), "No Red Tide", "2 Years Red Tide"),
    om_model = ifelse(scenario %in% c("no_rt", "no_rt_x_rt_2"), "No Red Tide", "2 Years Red Tide")
  ) %>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_dead_5, re_F_5),
    names_to = "variable",
    values_to = "value"
  ) %>%
  ggplot(aes(year, value)) +
    geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  stat_summary(fun = mean, geom = "line", aes(color = em_model), linewidth = 1) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", aes(fill = em_model), alpha = 0.3) +
  facet_grid(om_model~variable) +
  theme_bw() +
  xlim(2000, 2025)+
  labs(color = "EM", fill = "EM", x = "Year", y = "Estimation Error (MAPE)")

```


### SSB and Catch, 2017-2025


```{r, warning = FALSE, message =FALSE}
EM_means %>%
  mutate(
    em_model = ifelse(scenario %in% c("no_rt", "rt_2_x_no_rt"), "No Red Tide", "2 Years Red Tide"),
    om_model = ifelse(scenario %in% c("no_rt", "no_rt_x_rt_2"), "No Red Tide", "2 Years Red Tide")
  ) %>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_SpawnBio, re_com, re_rec, re_abundance),
    names_to = "variable",
    values_to = "value",
    names_transform = list(
      variable = ~recode(
        .x,
        "re_SpawnBio" = "Spawning Biomass",
        "re_com" = "Commercial Catch",
        "re_rec" = "Recreational Catch",
        "re_abundance" = "Abundance"
      )
  )) %>%
  ggplot(aes(year, value)) +
  geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  stat_summary(fun = mean, geom = "line", aes(color = em_model), linewidth = 1) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", aes(fill = em_model), alpha = 0.3) +
  facet_grid(om_model~variable) +
  theme_bw()+ 
  xlim(2017, 2025)+
  labs(color = "EM", fill = "EM", x = "Year", y = "Estimation Error (MAPE)")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

Notes: 
When there is no red tide in the OM, a matching EM results in less error in 2018 and a higher error in 2021.  When there is a red tide in the OM, a matching EM results in less error in 2018 and more error in 2021.  

Misspecifying the model does not increase the error, instead there is more error in 2021 and less error in 2018.  



### RT, 2000-2025

```{r, warning = FALSE, message =FALSE}
EM_means %>%
  mutate(
    em_model = ifelse(scenario %in% c("no_rt", "rt_2_x_no_rt"), "No Red Tide", "2 Years Red Tide"),
    om_model = ifelse(scenario %in% c("no_rt", "no_rt_x_rt_2"), "No Red Tide", "2 Years Red Tide")
  ) %>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_dead_5, re_F_5),
    names_to = "variable",
    values_to = "value"
  ) %>%
  ggplot(aes(year, value)) +
    geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  stat_summary(fun = mean, geom = "line", aes(color = em_model), linewidth = 1) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", aes(fill = em_model), alpha = 0.3) +
  facet_grid(om_model~variable) +
  theme_bw() +
  xlim(2000, 2025)+
  labs(color = "EM", fill = "EM", x = "Year", y = "Estimation Error (MAPE)")

```


:::


## Relative Error

::: panel-tabset

### SSB and Catch, all years

```{r}
EM_means_re %>%
  mutate(
    em_model = ifelse(scenario %in% c("no_rt", "rt_2_x_no_rt"), "No Red Tide", "2 Years Red Tide"),
    om_model = ifelse(scenario %in% c("no_rt", "no_rt_x_rt_2"), "No Red Tide", "2 Years Red Tide")
  ) %>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_SpawnBio, re_com, re_rec),
    names_to = "variable",
    values_to = "value"
  ) %>%
  ggplot(aes(year, value)) +
  geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  stat_summary(fun = mean, geom = "line", aes(color = em_model), linewidth = 1) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", aes(fill = em_model), alpha = 0.3) +
  facet_grid(om_model~variable) +
  theme_bw()
```

### RT, all years

```{r}
EM_means_re %>%
  mutate(
    em_model = ifelse(scenario %in% c("no_rt", "rt_2_x_no_rt"), "No Red Tide", "2 Years Red Tide"),
    om_model = ifelse(scenario %in% c("no_rt", "no_rt_x_rt_2"), "No Red Tide", "2 Years Red Tide")
  ) %>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_dead_5, re_F_5),
    names_to = "variable",
    values_to = "value"
  ) %>%
  ggplot(aes(year, value)) +
  stat_summary(fun = mean, geom = "line", aes(color = em_model), linewidth = 1) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", aes(fill = em_model), alpha = 0.3) +
  facet_grid(om_model~variable) +
  theme_bw() 

```

### SSB and Catch, 1980-2030

```{r}
EM_means_re %>%
  mutate(
    em_model = ifelse(scenario %in% c("no_rt", "rt_2_x_no_rt"), "No Red Tide", "2 Years Red Tide"),
    om_model = ifelse(scenario %in% c("no_rt", "no_rt_x_rt_2"), "No Red Tide", "2 Years Red Tide")
  ) %>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_SpawnBio, re_com, re_rec),
    names_to = "variable",
    values_to = "value"
  ) %>%
  ggplot(aes(year, value)) +
  geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  stat_summary(fun = mean, geom = "line", aes(color = em_model), linewidth = 1) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", aes(fill = em_model), alpha = 0.3) +
  facet_grid(om_model~variable) +
  theme_bw() +
  xlim(1980, 2030)
```

### RT, 1980-2030

```{r}
EM_means_re %>%
  mutate(
    em_model = ifelse(scenario %in% c("no_rt", "rt_2_x_no_rt"), "No Red Tide", "2 Years Red Tide"),
    om_model = ifelse(scenario %in% c("no_rt", "no_rt_x_rt_2"), "No Red Tide", "2 Years Red Tide")
  ) %>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_dead_5, re_F_5),
    names_to = "variable",
    values_to = "value"
  ) %>%
  ggplot(aes(year, value)) +
  stat_summary(fun = mean, geom = "line", aes(color = em_model), linewidth = 1) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", aes(fill = em_model), alpha = 0.3) +
  facet_grid(om_model~variable) +
  theme_bw() +
  xlim(1980, 2030)

```

### SSB and Catch, 2000-2025


```{r}
EM_means_re %>%
  mutate(
    em_model = ifelse(scenario %in% c("no_rt", "rt_2_x_no_rt"), "No Red Tide", "2 Years Red Tide"),
    om_model = ifelse(scenario %in% c("no_rt", "no_rt_x_rt_2"), "No Red Tide", "2 Years Red Tide")
  ) %>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_SpawnBio, re_com, re_rec),
    names_to = "variable",
    values_to = "value"
  ) %>%
  ggplot(aes(year, value)) +
  geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  stat_summary(fun = mean, geom = "line", aes(color = em_model), linewidth = 1) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", aes(fill = em_model), alpha = 0.3) +
  facet_grid(om_model~variable) +
  theme_bw() +
  xlim(2000, 2025)
```

### RT, 2000-2025

```{r}
EM_means_re %>%
  mutate(
    em_model = ifelse(scenario %in% c("no_rt", "rt_2_x_no_rt"), "No Red Tide", "2 Years Red Tide"),
    om_model = ifelse(scenario %in% c("no_rt", "no_rt_x_rt_2"), "No Red Tide", "2 Years Red Tide")
  ) %>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_dead_5, re_F_5),
    names_to = "variable",
    values_to = "value"
  ) %>%
  ggplot(aes(year, value)) +
    geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  stat_summary(fun = mean, geom = "line", aes(color = em_model), linewidth = 1) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", aes(fill = em_model), alpha = 0.3) +
  facet_grid(om_model~variable) +
  theme_bw() +
  xlim(2000, 2025)

```

### SSB and Catch, 2017-2025


```{r, warning = FALSE, message =FALSE}
EM_means_re %>%
  mutate(
    em_model = ifelse(scenario %in% c("no_rt", "rt_2_x_no_rt"), "No Red Tide", "2 Years Red Tide"),
    om_model = ifelse(scenario %in% c("no_rt", "no_rt_x_rt_2"), "No Red Tide", "2 Years Red Tide")
  ) %>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_SpawnBio, re_com, re_rec, re_abundance),
    names_to = "variable",
    values_to = "value",
    names_transform = list(
      variable = ~recode(
        .x,
        "re_SpawnBio" = "Spawning Biomass",
        "re_com" = "Commercial Catch",
        "re_rec" = "Recreational Catch",
        "re_abundance" = "Abundance"
      )
  )) %>%
  ggplot(aes(year, value)) +
  geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  stat_summary(fun = mean, geom = "line", aes(color = em_model), linewidth = 1) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", aes(fill = em_model), alpha = 0.3) +
  facet_grid(om_model~variable) +
  theme_bw()+ 
  xlim(2017, 2025)+
  labs(color = "EM", fill = "EM", x = "Year", y = "Estimation Error (MAPE)")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

:::

# Other Explorations

## Exploring Recruitment

::: panel-tabset
### Recruitment DQ

```{r, echo = FALSE, warning = FALSE}
dq_plot_variable(summary, variable = Value.Recr, run_res_path = run_res_path)
```

### Recruitment TS

"rec_dev" "raw_rec_dev" "Recruit_0"

```{r, echo = FALSE, warning = FALSE}
ts_plot_variable(summary, Recruit_0, run_res_path, save = TRUE)
```

### rec_dev TS

```{r, echo = FALSE, warning = FALSE}
ts_plot_variable(summary, rec_dev, run_res_path, save = TRUE)
```

### raw rec_dev TS

```{r, echo = FALSE, warning = FALSE}
ts_plot_variable(summary, raw_rec_dev, run_res_path, save = TRUE)
```
:::

## Pull data from SS runs

```{r, include = FALSE}

library(r4ss)

iter = 1
bonus_scen <- scen_list

size_sel_plots <- function(scen_list) {
  scenario_results_list <- map(scen_list, function(scen) {
    iteration_results_list <- map(1:10, function(iter) {
      selectivity_run <- file.path(
        cc_storage,
        paste0("results", results_name),
        scen,
        iter,
        paste0(OM_name, "_EM_2047")
      )
      if (!dir.exists(selectivity_run)) {
        warning(paste(
          "Directory not found:",
          selectivity_run,
          "- Skipping this run."
        ))
        return(NULL) # Return NULL if directory doesn't exist, will be handled by list_rbind
      }
      
      selectivity_res <- SS_output(selectivity_run,
                                   printstats = FALSE,
                                   verbose = FALSE)
      
      
      size_selectivity <- selectivity_res$sizeselex %>%
        filter(Label == "2047_4_Lsel") %>%
        pivot_longer(
          cols = matches("^\\d+$"),
          names_to = "length",
          values_to = "selex"
        ) %>%
        mutate(scenario = scen, iteration = iter)
      
      age_selectivity <- selectivity_res$ageselex %>%
        filter(Label == "2047_4_Asel2") %>%
        pivot_longer(
          cols = matches("^\\d+$"),
          names_to = "age",
          values_to = "selex"
        ) %>%
        mutate(scenario = scen, iteration = iter)
      
      natage <- selectivity_res$natage %>%
        filter(`Beg/Mid` == "B") %>%
        pivot_longer(
          cols = matches("^\\d+$"),
          names_to = "age",
          values_to = "n"
        ) %>%
        mutate(scenario = scen, iteration = iter)
            
      batage <- selectivity_res$batage %>%
        filter(`Beg/Mid` == "B") %>%
        pivot_longer(
          cols = matches("^\\d+$"),
          names_to = "age",
          values_to = "biomass"
        ) %>%
        mutate(scenario = scen, iteration = iter)
      
      catage <- selectivity_res$catage %>%
        pivot_longer(
          cols = matches("^\\d+$"),
          names_to = "age",
          values_to = "catch"
        ) %>%
        mutate(scenario = scen, iteration = iter)
      
      disc_selectivity <- selectivity_res$sizeselex %>%
        filter(Label == "2047_4_Dead") %>%
        pivot_longer(
          cols = matches("^\\d+$"),
          names_to = "length",
          values_to = "selex"
        ) %>%
        mutate(scenario = scen, iteration = iter)
      
      list(
        lsel_df = size_selectivity,
        asel_df = age_selectivity,
        natage_df = natage,
        batage_df = batage,
        catage_df = catage, 
        disc_df = disc_selectivity
      )
    })
    
    iteration_results_list <- purrr::compact(iteration_results_list)

    # Combine all dfs from this scenario's iterations
    combined_lsel_df <- map(iteration_results_list, ~ .x$lsel_df) %>%
      list_rbind() 
    combined_asel_df <- map(iteration_results_list, ~ .x$asel_df) %>%
      list_rbind() 
    combined_natage_df <- map(iteration_results_list, ~ .x$natage_df) %>%
      list_rbind() 
    combined_batage_df <- map(iteration_results_list, ~ .x$batage_df) %>%
      list_rbind()
    combined_catage_df <- map(iteration_results_list, ~ .x$catage_df) %>%
      list_rbind()
    combined_disc_df <- map(iteration_results_list, ~ .x$disc_df) %>%
      list_rbind()
    # Return a list of combined data frames for this scenario
    list(
      lsel_scenario_df = combined_lsel_df,
      asel_scenario_df = combined_asel_df,      
      natage_scenario_df = combined_natage_df,
      batage_scenario_df = combined_batage_df,
      catage_scenario_df = combined_catage_df,
      disc_scenario_df = combined_disc_df
    )
  })
  # Filter out NULL results from scenarios if any were skipped
  scenario_results_list <- purrr::compact(scenario_results_list)

  # Finally, combine all scenario data frames
  final_lsel_data <- map(scenario_results_list, ~ .x$lsel_scenario_df) %>%
    list_rbind()
  final_asel_data <- map(scenario_results_list, ~ .x$asel_scenario_df) %>%
    list_rbind()
  final_natage_data <- map(scenario_results_list, ~ .x$natage_scenario_df) %>%
    list_rbind()
  final_batage_data <- map(scenario_results_list, ~ .x$batage_scenario_df) %>%
    list_rbind()
  final_catage_data <- map(scenario_results_list, ~ .x$catage_scenario_df) %>%
    list_rbind()
  final_disc_data <- map(scenario_results_list, ~ .x$disc_scenario_df) %>%
    list_rbind()
  
  # Return a list containing both combined data frames
  return(list(
    length_selectivity_data = final_lsel_data,
    age_selectivity_data = final_asel_data,
    natage_data = final_natage_data,
    batage_data = final_batage_data,
    catage_data = final_catage_data,
    disc_data = final_disc_data
  ))
}

scen_dat <- size_sel_plots(bonus_scen)


```

```{r, include = FALSE}

size_sel_plots_OM <- function(scen_list) {
  scenario_results_list <- map(scen_list, function(scen) {
    iteration_results_list <- map(1:10, function(iter) {
      selectivity_run <- file.path(
        cc_storage,
        paste0("results", results_name),
        scen,
        iter,
        paste0(OM_name, "_OM")
      )
      if (!dir.exists(selectivity_run)) {
        warning(paste(
          "Directory not found:",
          selectivity_run,
          "- Skipping this run."
        ))
        return(NULL) # Return NULL if directory doesn't exist, will be handled by list_rbind
      }
      
      selectivity_res <- SS_output(selectivity_run,
                                   printstats = FALSE,
                                   verbose = FALSE)
      
      
      size_selectivity <- selectivity_res$sizeselex %>%
        filter(Label == "2047_4_Lsel") %>%
        pivot_longer(
          cols = matches("^\\d+$"),
          names_to = "length",
          values_to = "selex"
        ) %>%
        mutate(scenario = scen, iteration = iter)
      
      age_selectivity <- selectivity_res$ageselex %>%
        filter(Label == "2047_4_Asel2") %>%
        pivot_longer(
          cols = matches("^\\d+$"),
          names_to = "age",
          values_to = "selex"
        ) %>%
        mutate(scenario = scen, iteration = iter)
      
      natage <- selectivity_res$natage %>%
        filter(`Beg/Mid` == "B") %>%
        pivot_longer(
          cols = matches("^\\d+$"),
          names_to = "age",
          values_to = "n"
        ) %>%
        mutate(scenario = scen, iteration = iter)
            
      batage <- selectivity_res$batage %>%
        filter(`Beg/Mid` == "B") %>%
        pivot_longer(
          cols = matches("^\\d+$"),
          names_to = "age",
          values_to = "biomass"
        ) %>%
        mutate(scenario = scen, iteration = iter)
      
      catage <- selectivity_res$catage %>%
        pivot_longer(
          cols = matches("^\\d+$"),
          names_to = "age",
          values_to = "catch"
        ) %>%
        mutate(scenario = scen, iteration = iter)
      
      disc_selectivity <- selectivity_res$sizeselex %>%
        filter(Label == "2047_4_Dead") %>%
        pivot_longer(
          cols = matches("^\\d+$"),
          names_to = "length",
          values_to = "selex"
        ) %>%
        mutate(scenario = scen, iteration = iter)
      
      list(
        lsel_df = size_selectivity,
        asel_df = age_selectivity,
        natage_df = natage,
        batage_df = batage,
        catage_df = catage, 
        disc_df = disc_selectivity
      )
    })
    
    iteration_results_list <- purrr::compact(iteration_results_list)

    # Combine all dfs from this scenario's iterations
    combined_lsel_df <- map(iteration_results_list, ~ .x$lsel_df) %>%
      list_rbind() 
    combined_asel_df <- map(iteration_results_list, ~ .x$asel_df) %>%
      list_rbind() 
    combined_natage_df <- map(iteration_results_list, ~ .x$natage_df) %>%
      list_rbind() 
    combined_batage_df <- map(iteration_results_list, ~ .x$batage_df) %>%
      list_rbind()
    combined_catage_df <- map(iteration_results_list, ~ .x$catage_df) %>%
      list_rbind()
    combined_disc_df <- map(iteration_results_list, ~ .x$disc_df) %>%
      list_rbind()
    # Return a list of combined data frames for this scenario
    list(
      lsel_scenario_df = combined_lsel_df,
      asel_scenario_df = combined_asel_df,      
      natage_scenario_df = combined_natage_df,
      batage_scenario_df = combined_batage_df,
      catage_scenario_df = combined_catage_df,
      disc_scenario_df = combined_disc_df
    )
  })
  # Filter out NULL results from scenarios if any were skipped
  scenario_results_list <- purrr::compact(scenario_results_list)

  # Finally, combine all scenario data frames
  final_lsel_data <- map(scenario_results_list, ~ .x$lsel_scenario_df) %>%
    list_rbind()
  final_asel_data <- map(scenario_results_list, ~ .x$asel_scenario_df) %>%
    list_rbind()
  final_natage_data <- map(scenario_results_list, ~ .x$natage_scenario_df) %>%
    list_rbind()
  final_batage_data <- map(scenario_results_list, ~ .x$batage_scenario_df) %>%
    list_rbind()
  final_catage_data <- map(scenario_results_list, ~ .x$catage_scenario_df) %>%
    list_rbind()
  final_disc_data <- map(scenario_results_list, ~ .x$disc_scenario_df) %>%
    list_rbind()
  
  # Return a list containing both combined data frames
  return(list(
    length_selectivity_data = final_lsel_data,
    age_selectivity_data = final_asel_data,
    natage_data = final_natage_data,
    batage_data = final_batage_data,
    catage_data = final_catage_data,
    disc_data = final_disc_data
  ))
}

scen_dat_OM <- size_sel_plots_OM(bonus_scen)


```


## Selectivity Exploration

::: panel-tabset

### Selectivity at length (points) with OM line

```{r}
scen_dat$length_selectivity_data %>%
  ggplot(aes(as.numeric(length), selex)) + 
  geom_point(aes(color = scenario, group = scenario)) +
  geom_line(data = scen_dat_OM$length_selectivity_data, aes(as.numeric(length), selex, color = scenario, group = scenario))+
  ggtitle("Length Selectivity - Rec Fleet")+
  theme_bw()
```

### Selectivity at length (lines) with OM

```{r}
scen_dat$length_selectivity_data %>%
  ggplot(aes(as.numeric(length), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario), linewidth = 1, alpha = 3) +
  geom_line(data = scen_dat_OM$length_selectivity_data, aes(as.numeric(length), selex,  group = scenario), color = "black", linewidth = 1, linetype = "dashed")+
  ggtitle("Length Selectivity - Rec Fleet")+
  facet_wrap(~scenario)+
  theme_bw()
  
```

### Zoomed in Selectivity at length


```{r}
scen_dat$length_selectivity_data <- scen_dat$length_selectivity_data %>%
  mutate(is_highlighted = ifelse(scenario %in% c(OM_name), "Highlighted", "Other"))


scen_dat$length_selectivity_data %>%
  ggplot(aes(as.numeric(length), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario), size = 1, alpha = 3) +
  ggtitle("Length Selectivity - Rec Fleet") +
  coord_cartesian(xlim = c(10, 25), ylim = c(0,0.4)) +
  theme_bw()
  
scen_dat$length_selectivity_data %>%
  ggplot(aes(as.numeric(length), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario), size = 1, alpha = 3) +
  ggtitle("Length Selectivity - Rec Fleet")+
  coord_cartesian(xlim = c(30, 52))+
  theme_bw()

scen_dat$length_selectivity_data %>%
  ggplot(aes(as.numeric(length), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario), size = 1, alpha = 3) +
  ggtitle("Length Selectivity - Rec Fleet")+
  coord_cartesian(xlim = c(50, 65))+
  theme_bw()

```

### Zoomed in Selectivity at length with highlighted line

```{r}

scen_dat$length_selectivity_data %>%
  ggplot(aes(as.numeric(length), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario, size = is_highlighted), alpha = 3) +
  scale_size_manual(values = c("Highlighted" = 2.0, "Other" = 0.5)) +
  ggtitle("Length Selectivity - Rec Fleet") +
  coord_cartesian(xlim = c(10, 25)) +
  theme_bw()

scen_dat$length_selectivity_data %>%
  ggplot(aes(as.numeric(length), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario, size = is_highlighted), alpha = 3) +
  scale_size_manual(values = c("Highlighted" = 2.0, "Other" = 0.5)) +  ggtitle("Length Selectivity - Rec Fleet")+
  coord_cartesian(xlim = c(25, 60))+
  theme_bw()

scen_dat$length_selectivity_data %>%
  ggplot(aes(as.numeric(length), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario, size = is_highlighted), alpha = 3) +
  scale_size_manual(values = c("Highlighted" = 2.0, "Other" = 0.5)) +  ggtitle("Length Selectivity - Rec Fleet")+
  coord_cartesian(xlim = c(50, 65))+
  theme_bw()


```

:::

::: panel-tabset

### Selectivity at age (points)

```{r}
scen_dat$age_selectivity_data %>%
  ggplot(aes(as.numeric(age), selex)) + 
  geom_point(aes(color = scenario, group = scenario)) +
  ggtitle("age Selectivity - Rec Fleet")+
  theme_bw()
```

### Selectivity at age (lines)

```{r}
scen_dat$age_selectivity_data %>%
  ggplot(aes(as.numeric(age), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario), size = 1, alpha = 3) +
  ggtitle("age Selectivity - Rec Fleet")+
  theme_bw()
  
```

### Zoomed in Selectivity at age


```{r}
scen_dat$age_selectivity_data <- scen_dat$age_selectivity_data %>%
  mutate(is_highlighted = ifelse(scenario %in% c(OM_name), "Highlighted", "Other"))


scen_dat$age_selectivity_data %>%
  ggplot(aes(as.numeric(age), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario), size = 1, alpha = 3) +
  ggtitle("age Selectivity - Rec Fleet") +
  coord_cartesian(xlim = c(0, 5)) +
  theme_bw()
  
scen_dat$age_selectivity_data %>%
  ggplot(aes(as.numeric(age), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario), size = 1, alpha = 3) +
  ggtitle("age Selectivity - Rec Fleet")+
  coord_cartesian(xlim = c(5, 10))+
  theme_bw()

scen_dat$age_selectivity_data %>%
  ggplot(aes(as.numeric(age), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario), size = 1, alpha = 3) +
  ggtitle("age Selectivity - Rec Fleet")+
  coord_cartesian(xlim = c(10, 20))+
  theme_bw()

```

### Zoomed in Selectivity at age with highlighted line

```{r}

scen_dat$age_selectivity_data %>%
  ggplot(aes(as.numeric(age), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario, size = is_highlighted), alpha = 3) +
  scale_size_manual(values = c("Highlighted" = 2.0, "Other" = 0.5)) +
  ggtitle("age Selectivity - Rec Fleet") +
  coord_cartesian(xlim = c(0, 5)) +
  theme_bw()

scen_dat$age_selectivity_data %>%
  ggplot(aes(as.numeric(age), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario, size = is_highlighted), alpha = 3) +
  scale_size_manual(values = c("Highlighted" = 2.0, "Other" = 0.5)) +  ggtitle("age Selectivity - Rec Fleet")+
  coord_cartesian(xlim = c(5, 10))+
  theme_bw()

scen_dat$age_selectivity_data %>%
  ggplot(aes(as.numeric(age), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario, size = is_highlighted), alpha = 3) +
  scale_size_manual(values = c("Highlighted" = 2.0, "Other" = 0.5)) +  ggtitle("age Selectivity - Rec Fleet")+
  coord_cartesian(xlim = c(10, 20))+
  theme_bw()


```

:::

## natage

::: panel-tabset

### N at age with OM (dashed)

```{r}
scen_dat$natage_data %>%
  filter(Yr == 2017) %>%
  ggplot(aes(as.numeric(age), n)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario), linewidth = 1, alpha = 3) +
  stat_summary(data = scen_dat_OM$natage, fun = "median", geom = "line", aes(color = scenario), linewidth = 1, alpha = 3, linetype = "dashed") +
  facet_wrap(~scenario) +
  ggtitle("Median N at Age")+
  theme_bw()
```


### N at age (lines) in 2017

```{r}
scen_dat$natage_data %>%
  filter(Yr == 2017) %>%
  ggplot(aes(as.numeric(age), n)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario), linewidth = 1, alpha = 3) +
  ggtitle("Median N at Age")+
  theme_bw()
```

### N at age (points) in 2017

```{r}
scen_dat$natage_data %>%
  filter(Yr == 2017) %>%
  ggplot(aes(as.numeric(age), n)) + 
  geom_point(aes(color = scenario, group = scenario)) +
  ggtitle("N at Age")+
  theme_bw()
```

:::

## batage

::: panel-tabset


### Biomass at age (lines) with OM in 2017

```{r}
scen_dat$batage_data %>%
  filter(Yr == 2017) %>%
  ggplot(aes(as.numeric(age), biomass)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario), linewidth = 1, alpha = 3) +
  stat_summary(data = scen_dat_OM$batage_data, fun = "median", geom = "line",   linewidth = 1, alpha = 3, linetype = "dashed", color = "black") +
  ggtitle("Median Biomass at Age")+
  facet_wrap(~scenario)+
  theme_bw()
```

### Biomass at age (lines) in 2017

```{r}
scen_dat$batage_data %>%
  filter(Yr == 2017) %>%
  ggplot(aes(as.numeric(age), biomass)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario), linewidth = 1, alpha = 3) +
  ggtitle("Median Biomass at Age")+
  theme_bw()
```

### Biomass at age (points) in 2017

```{r}
scen_dat$batage_data %>%
  filter(Yr == 2017) %>%
  ggplot(aes(as.numeric(age), biomass)) + 
  geom_point(aes(color = scenario, group = scenario)) +
  ggtitle("Biomass at Age")+
  theme_bw()
```

:::

## catage

::: panel-tabset

### Catch at age (lines) in 2017

```{r}
scen_dat$catage_data %>%
  filter(Yr == 2017) %>%
  ggplot(aes(as.numeric(age), catch)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario), linewidth = 1, alpha = 3) +
  stat_summary(data = scen_dat_OM$catage_data, fun = "median", geom = "line",   linewidth = 1, alpha = 3, linetype = "dashed", color = "black") +
  ggtitle("Median Catch at Age") +
  facet_wrap(~Fleet) +
  theme_bw()
```

### Catch at age (points) in 2017

```{r}
scen_dat$catage_data %>%
  filter(Yr == 2017) %>%
  ggplot(aes(as.numeric(age), catch)) + 
  geom_point(aes(color = scenario, group = scenario)) +
  ggtitle("Catch at Age") +
  facet_wrap(~Fleet) +
  theme_bw()
```

:::

## Selectivity Exploration Disc

::: panel-tabset

### Selectivity at length (points)

```{r}
scen_dat$disc_data %>%
  ggplot(aes(as.numeric(length), selex)) + 
  geom_point(aes(color = scenario, group = scenario)) +
  ggtitle("Length Selectivity - Dead Rec Fleet")+
  theme_bw()
```

### Selectivity at length (lines)

```{r}
scen_dat$disc_data %>%
  ggplot(aes(as.numeric(length), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario), linewidth = 1, alpha = 3) +
  ggtitle("Length Selectivity - Dead Rec Fleet")+
  theme_bw()
  
```

### Zoomed in Selectivity at length


```{r}
scen_dat$disc_data <- scen_dat$disc_data %>%
  mutate(is_highlighted = ifelse(scenario %in% c(OM_name), "Highlighted", "Other"))


scen_dat$disc_data %>%
  ggplot(aes(as.numeric(length), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario), size = 1, alpha = 3) +
  ggtitle("Length Selectivity - Dead Rec Fleet") +
  coord_cartesian(xlim = c(10, 25), ylim = c(0,0.4)) +
  theme_bw()
  
scen_dat$disc_data %>%
  ggplot(aes(as.numeric(length), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario), size = 1, alpha = 3) +
  ggtitle("Length Selectivity - Dead Rec Fleet")+
  coord_cartesian(xlim = c(30, 52))+
  theme_bw()

scen_dat$disc_data %>%
  ggplot(aes(as.numeric(length), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario), size = 1, alpha = 3) +
  ggtitle("Length Selectivity - Dead Rec Fleet")+
  coord_cartesian(xlim = c(50, 65))+
  theme_bw()

```

### Zoomed in Selectivity at length with highlighted line

```{r}

scen_dat$disc_data %>%
  ggplot(aes(as.numeric(length), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario, size = is_highlighted), alpha = 3) +
  scale_size_manual(values = c("Highlighted" = 2.0, "Other" = 0.5)) +
  ggtitle("Length Selectivity - Dead Rec Fleet") +
  coord_cartesian(xlim = c(10, 25)) +
  theme_bw()

scen_dat$disc_data %>%
  ggplot(aes(as.numeric(length), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario, size = is_highlighted), alpha = 3) +
  scale_size_manual(values = c("Highlighted" = 2.0, "Other" = 0.5)) +  ggtitle("Length Selectivity - Dead Rec Fleet")+
  coord_cartesian(xlim = c(25, 60))+
  theme_bw()

scen_dat$disc_data %>%
  ggplot(aes(as.numeric(length), selex)) + 
  stat_summary(fun = "median", geom = "line", aes(color = scenario, size = is_highlighted), alpha = 3) +
  scale_size_manual(values = c("Highlighted" = 2.0, "Other" = 0.5)) +  ggtitle("Length Selectivity - Dead Rec Fleet")+
  coord_cartesian(xlim = c(50, 65))+
  theme_bw()


```

:::

## Retention Exploration

::: panel-tabset
### Retention one iteration

```{r}
Mylogistic <- function(x,sl,inf,asym)  asym/(1+exp(-(1/sl)*(x-inf)))

retain <- summary$scalar %>%
  select(scenario, model_run, iteration, contains("Retain_L")) %>%
  pivot_longer(
    cols = starts_with("Retain_L_"),
    names_to = c(".value", "fleet"),
    names_pattern = "Retain_L_(asymptote_logit|infl|width)_(.*)"
  ) %>%
  rename(
    asym = asymptote_logit,
    sl = width
  ) 

plot_data <- expand_grid(
  nesting(retain), 
  x = seq(0, 100, 1)
) %>%
  mutate(
    y = Mylogistic(x, sl, infl, asym)
  )

plot_data %>%
  filter(str_detect(model_run, "2065|OM"), iteration == 1, !str_detect(fleet, "BLK"),) %>%
  ggplot(aes(x = x, y = y, group = interaction(model_run, iteration, fleet))) +
  geom_line(aes(color = fleet, linetype = model_run), linewidth = 1) +
  facet_wrap(~scenario) +
  labs(
    title = "Logistic Retention Curves by Fleet (iter = 1)",
    x = "Length",
    y = "Retention Probability"
  ) +
  theme_bw()

```

### Retention median

```{r}
  
plot_data %>%
  filter(str_detect(model_run, "2065|OM"), !str_detect(fleet, "BLK"),) %>%
  ggplot(aes(x = x, y = y)) +
  stat_summary(fun = "median", geom = "line", aes(color = fleet, linetype = model_run), linewidth =1 ) +
  facet_wrap(~scenario) +
  labs(
    title = "Logistic Retention Curves by Fleet (median, 10 iter)",
    x = "Length",
    y = "Retention Probability"
  ) +
  theme_bw()
```

:::


## Ro Exploration

Extracted the R0 from SR_LN_R0 from the summary$scalar.  

```{r}

summary$scalar %>%
  select(iteration, scenario, model_run, SR_LN_R0) %>%
  mutate(r0 = exp(SR_LN_R0)) %>%
  ggplot(aes(scenario, r0)) +
  geom_boxplot() +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))

summary$scalar %>%
  select(iteration, scenario, model_run, SR_LN_R0) %>%
  mutate(r0 = exp(SR_LN_R0)) %>%
  ggplot(aes(scenario, r0)) +
  geom_boxplot(aes(color = model_run)) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))


```

```{r}

ratio_R0 <- summary$scalar %>%
  select(iteration, scenario, model_run, SR_LN_R0) %>%
  mutate(r0 = exp(SR_LN_R0)) %>%
  select(!SR_LN_R0) %>%
  filter(model_run %in% c(paste0(OM_name, "_OM"), paste0(OM_name, "_EM_2047"))) %>%
  pivot_wider(
      names_from = model_run,  # this will create "OM" and "EM" columns
      values_from = r0
  ) %>%
  rename("OM" = paste0(OM_name, "_OM") , "EM" = paste0(OM_name, "_EM_2047")) %>%
  group_by(scenario, iteration) %>%
  mutate(ratio_R0 = EM/OM)
  
ratio_R0 %>%
  ggplot(aes(scenario, ratio_R0)) +
  geom_boxplot()

```


## Testing new plots


### MAPE

```{r}

dq_OM <- summary$dq %>%
  filter(model_run == paste0(OM_name, "_OM")) %>%
  select(scenario, year, iteration, Value.Bratio, Value.F) %>%
  rename(
    OM_bratio = Value.Bratio,
    OM_F = Value.F
  )

dq_EM <- summary$dq %>%
  filter(
    str_detect(model_run, "_EM_2047")) %>%
  left_join(dq_OM, by = c("year", "scenario", "iteration")) %>%
  group_by(scenario, iteration, year) %>%
  mutate(
    re_F = ifelse(is.na((Value.F - OM_F) / OM_F), 0, abs((Value.F - OM_F) /
                      OM_F))*100,
    re_bratio = ifelse(is.na((Value.Bratio - OM_bratio) / OM_bratio), 0, abs((Value.Bratio - OM_bratio) /
                      OM_bratio))*100,
    end_year = as.numeric(str_extract(model_run, "\\d{4}$"))+3,
    years_until_terminal = end_year - year
  )

dq_EM %>%
mutate(
    em_model = ifelse(
      scenario %in% c("no_rt", "rt_2_x_no_rt", "rt_2_x_no_rt_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    ),
    om_model = ifelse(
      scenario %in% c("no_rt", "no_rt_x_rt_2", "no_rt_x_rt_2_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    )
  )%>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_bratio, re_F),
    names_to = "variable",
    values_to = "value",
    names_transform = list(
      variable = ~recode(
        .x,
        "re_bratio" = "BRatio",
        "re_F" = "Total F"
      )
  )) %>%
  ggplot(aes(year, value)) +
  geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  stat_summary(fun = mean, geom = "line", aes(color = em_model)) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", aes(fill = em_model), alpha = 0.3) +
  facet_grid(om_model~variable) +
  theme_bw()+ 
  coord_cartesian(xlim = c(1986, 2044)) +
  labs(color = "EM", fill = "EM", x = "Year", y = "Estimation Error (MAPE)")

```
### Relative Error

```{r}

dq_OM <- summary$dq %>%
  filter(model_run == paste0(OM_name, "_OM")) %>%
  select(scenario, year, iteration, Value.Bratio, Value.F) %>%
  rename(
    OM_bratio = Value.Bratio,
    OM_F = Value.F
  )

dq_EM <- summary$dq %>%
  filter(
    str_detect(model_run, "_EM_2047")) %>%
  left_join(dq_OM, by = c("year", "scenario", "iteration")) %>%
  group_by(scenario, iteration, year) %>%
  mutate(
    re_F = ifelse(is.na((Value.F - OM_F) / OM_F), 0, (Value.F - OM_F) /
                      OM_F),
    re_bratio = ifelse(is.na((Value.Bratio - OM_bratio) / OM_bratio), 0, (Value.Bratio - OM_bratio) /
                      OM_bratio),
    end_year = as.numeric(str_extract(model_run, "\\d{4}$"))+3,
    years_until_terminal = end_year - year
  )

dq_EM %>%
mutate(
    em_model = ifelse(
      scenario %in% c("no_rt", "rt_2_x_no_rt", "rt_2_x_no_rt_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    ),
    om_model = ifelse(
      scenario %in% c("no_rt", "no_rt_x_rt_2", "no_rt_x_rt_2_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    )
  )%>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_bratio, re_F),
    names_to = "variable",
    values_to = "value",
    names_transform = list(
      variable = ~recode(
        .x,
        "re_bratio" = "BRatio",
        "re_F" = "Total F"
      )
  )) %>%
  ggplot(aes(year, value)) +
  geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  stat_summary(fun = mean, geom = "line", aes(color = em_model)) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", aes(fill = em_model), alpha = 0.3) +
  facet_grid(om_model~variable) +
  theme_bw()+ 
  coord_cartesian(xlim = c(1986, 2044)) +
  labs(color = "EM", fill = "EM", x = "Year", y = "Estimation Error (Relative Error)")

```

### Ratio EM:OM

```{r}

dq_OM <- summary$dq %>%
  filter(model_run == paste0(OM_name, "_OM")) %>%
  select(scenario, year, iteration, Value.Bratio, Value.F) %>%
  rename(
    OM_bratio = Value.Bratio,
    OM_F = Value.F
  )

dq_EM <- summary$dq %>%
  filter(
    str_detect(model_run, "_EM_2047")) %>%
  left_join(dq_OM, by = c("year", "scenario", "iteration")) %>%
  group_by(scenario, iteration, year) %>%
  mutate(
    re_F = ifelse(is.na(Value.F/ OM_F), 0, (Value.F/OM_F)),
    re_bratio = ifelse(is.na(Value.Bratio/OM_bratio), 0, (Value.Bratio/OM_bratio)),
    end_year = as.numeric(str_extract(model_run, "\\d{4}$"))+3,
    years_until_terminal = end_year - year
    )

dq_EM %>%
mutate(
    em_model = ifelse(
      scenario %in% c("no_rt", "rt_2_x_no_rt", "rt_2_x_no_rt_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    ),
    om_model = ifelse(
      scenario %in% c("no_rt", "no_rt_x_rt_2", "no_rt_x_rt_2_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    )
  )%>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_bratio, re_F),
    names_to = "variable",
    values_to = "value",
    names_transform = list(
      variable = ~recode(
        .x,
        "re_bratio" = "BRatio",
        "re_F" = "Total F"
      )
  )) %>%
  ggplot(aes(year, value)) +
  geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  stat_summary(fun = mean, geom = "line", aes(color = em_model)) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", aes(fill = em_model), alpha = 0.3) +
  facet_grid(om_model~variable) +
  theme_bw()+ 
  coord_cartesian(xlim = c(1986, 2044)) +
  labs(color = "EM", fill = "EM", x = "Year", y = "EM:OM ratio")

```


```{r}

OM_means <- summary$ts %>%
  filter(model_run == paste0(OM_name, "_OM")) %>%
  select(scenario, year, Recruit_0, F_5, SpawnBio, iteration, retainB_1, retainB_2, retainB_4, deadB_5, F_1, F_2, F_4, Bio_smry) %>%
  rowwise() %>%
  mutate(commercial = sum(retainB_1, retainB_2), recreational = retainB_4, com_f = sum(F_1, F_2), rec_f = F_4) %>%
  rename(
    OM_Recruit_0 = Recruit_0,
    OM_F_5 = F_5,
    OM_SpawnBio = SpawnBio, 
    OM_com = commercial, 
    OM_rec = recreational, 
    OM_dead_5 = deadB_5,
    OM_com_f = com_f, 
    OM_rec_f = rec_f,
    OM_abundance = Bio_smry
  )

EM_means_re <- summary$ts %>%
  filter(
    str_detect(model_run, "_EM_2047")) %>%
  rowwise()%>%
  mutate(commercial = sum(retainB_1, retainB_2), recreational = retainB_4, com_f = sum(F_1, F_2), rec_f = F_4) %>%
  left_join(OM_means, by = c("year", "scenario", "iteration")) %>%
  group_by(scenario, iteration, year) %>%
  mutate(
    re_Recruit_0 = ifelse(
      is.na((Recruit_0 - OM_Recruit_0) / OM_Recruit_0),
      0,
      (Recruit_0 - OM_Recruit_0) / OM_Recruit_0
    ),
    #this put zeros back in.
    re_F_5 = ifelse(is.na((F_5 - OM_F_5) / OM_F_5), 0, (F_5 - OM_F_5) /
                      OM_F_5),
    re_SpawnBio = ifelse(is.na((SpawnBio - OM_SpawnBio) / OM_SpawnBio), 0, (SpawnBio - OM_SpawnBio) /
                      OM_SpawnBio),
        re_com = ifelse(is.na((commercial - OM_com) / OM_com), 0, (commercial - OM_com) /
                      OM_com),
        re_rec = ifelse(is.na((recreational - OM_rec) / OM_rec), 0, (recreational - OM_rec) /
                      OM_rec),
        re_dead_5 = ifelse(is.na((deadB_5 - OM_dead_5) / OM_dead_5), 0, (deadB_5 - OM_dead_5) /
                      OM_dead_5),
        re_com_f = ifelse(is.na((com_f - OM_com_f) / OM_com_f), 0, (com_f - OM_com_f) /
                      OM_com_f),
        re_rec_f = ifelse(is.na((rec_f - OM_rec_f) / OM_rec_f), 0, (rec_f - OM_rec_f) /
                      OM_rec_f),        
        re_abundance = ifelse(is.na((Bio_smry - OM_abundance) / OM_abundance), 0, (Bio_smry - OM_abundance) /
                      OM_abundance),
        re_removals = sum(re_com, re_rec, re_dead_5),
    end_year = as.numeric(str_extract(model_run, "\\d{4}$"))+3,
    years_until_terminal = end_year - year
  )

dq_EM <- summary$dq %>%
  filter(
    str_detect(model_run, "_EM_2047")) %>%
  left_join(dq_OM, by = c("year", "scenario", "iteration")) %>%
  group_by(scenario, iteration, year) %>%
  mutate(
    re_F = ifelse(is.na((Value.F - OM_F) / OM_F), 0, abs((Value.F - OM_F) /
                      OM_F))*100,
    re_bratio = ifelse(is.na((Value.Bratio - OM_bratio) / OM_bratio), 0, abs((Value.Bratio - OM_bratio) /
                      OM_bratio))*100,
    end_year = as.numeric(str_extract(model_run, "\\d{4}$"))+3,
    years_until_terminal = end_year - year
  )

EM_means <- summary$ts %>%
  filter(
    str_detect(model_run, "_EM_2047")) %>%
  rowwise()%>%
  mutate(commercial = sum(retainB_1, retainB_2), recreational = retainB_4, com_f = sum(F_1, F_2), rec_f = F_4) %>%
  left_join(OM_means, by = c("year", "scenario", "iteration")) %>%
  group_by(scenario, iteration, year) %>%
  mutate(
    re_Recruit_0 = ifelse(
      is.na((Recruit_0 - OM_Recruit_0) / OM_Recruit_0),
      0,
      abs((Recruit_0 - OM_Recruit_0) / OM_Recruit_0)*100
    ),
    #this put zeros back in.
    re_F_5 = ifelse(is.na((F_5 - OM_F_5) / OM_F_5), 0, abs((F_5 - OM_F_5) /
                      OM_F_5))*100,
    re_SpawnBio = ifelse(is.na((SpawnBio - OM_SpawnBio) / OM_SpawnBio), 0, abs((SpawnBio - OM_SpawnBio) /
                      OM_SpawnBio))*100,
        re_com = ifelse(is.na((commercial - OM_com) / OM_com), 0, abs((commercial - OM_com) /
                      OM_com))*100,
        re_rec = ifelse(is.na((recreational - OM_rec) / OM_rec), 0, abs((recreational - OM_rec) /
                      OM_rec))*100,
        re_dead_5 = ifelse(is.na((deadB_5 - OM_dead_5) / OM_dead_5), 0, abs((deadB_5 - OM_dead_5) /
                      OM_dead_5))*100,
        re_com_f = ifelse(is.na((com_f - OM_com_f) / OM_com_f), 0, abs((com_f - OM_com_f) /
                      OM_com_f))*100,
        re_rec_f = ifelse(is.na((rec_f - OM_rec_f) / OM_rec_f), 0, abs((rec_f - OM_rec_f) /
                      OM_rec_f))*100,        
        re_abundance = ifelse(is.na((Bio_smry - OM_abundance) / OM_abundance), 0, abs(Bio_smry - OM_abundance) /
                      OM_abundance)*100,
    re_removals = sum(re_com, re_rec, re_dead_5),
    end_year = as.numeric(str_extract(model_run, "\\d{4}$"))+3,
    years_until_terminal = end_year - year
  ) %>% 
  left_join(dq_EM, join_by(year, iteration, scenario))


```

::: panel-tabset

### Catch MAPES

```{r, warning = FALSE, message =FALSE}
EM_means %>%
mutate(
    em_model = ifelse(
      scenario %in% c("no_rt", "rt_2_x_no_rt", "rt_2_x_no_rt_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    ),
    om_model = ifelse(
      scenario %in% c("no_rt", "no_rt_x_rt_2", "no_rt_x_rt_2_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    )
  )%>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_com, re_rec, re_dead_5, re_removals),
    names_to = "variable",
    values_to = "value",
    names_transform = list(
      variable = ~recode(
        .x,
        "re_com" = "Commercial Catch",
        "re_rec" = "Recreational Catch",
        "re_dead_5" = "Red Tide Dead",
        "re_removals" = "Total Removals"
      )
  )) %>%
  ggplot(aes(year, value)) +
  geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  stat_summary(fun = mean, geom = "line", aes(color = em_model)) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", aes(fill = em_model), alpha = 0.3) +
  facet_grid(om_model~variable) +
  theme_bw()+ 
  coord_cartesian(xlim = c(2017, 2025)) +
  labs(color = "EM", fill = "EM", x = "Year", y = "Estimation Error (MAPE)")
```



### F MAPES

```{r, warning = FALSE, message =FALSE}
EM_means %>%
mutate(
    em_model = ifelse(
      scenario %in% c("no_rt", "rt_2_x_no_rt", "rt_2_x_no_rt_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    ),
    om_model = ifelse(
      scenario %in% c("no_rt", "no_rt_x_rt_2", "no_rt_x_rt_2_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    )
  )%>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_com_f, re_rec_f, re_F_5, re_F),
    names_to = "variable",
    values_to = "value",
    names_transform = list(
      variable = ~recode(
        .x,
        "re_com_f" = "Commercial F",
        "re_rec_f" = "Recreational F",
        "re_F_5" = "Red Tide F",
        "re_F" = "Total F"
      )
  )) %>%
  ggplot(aes(year, value)) +
  geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  stat_summary(fun = mean, geom = "line", aes(color = em_model)) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", aes(fill = em_model), alpha = 0.3) +
  facet_grid(om_model~variable) +
  theme_bw()+ 
  coord_cartesian(xlim = c(1986, 2044)) +
  labs(color = "EM", fill = "EM", x = "Year", y = "Estimation Error (MAPE)")
```

:::

```{r}

#Estimation Error in Red Tide Years vs. Non-Red Tide Years

rt_years <- c(2005, 2014, 2018, 2021)

rt_joined <- EM_means %>%
  mutate(year_type = ifelse(year %in% rt_years, "Red Tide", "No Red Tide"))

rt_joined %>%
  group_by(scenario, year_type) %>%
  reframe(ee_F = mean(re_F), ee_removals = mean(re_removals))

rt_joined %>%
  ggplot(aes(scenario, re_removals)) +
  geom_boxplot(aes(fill = year_type)) + 
  ylab("Estimation Error (MAPE)") + ggtitle("Comparison of error in red tide vs. non-red tide years")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


rt_joined %>%
  mutate(
    em_model = ifelse(
      scenario %in% c("no_rt", "rt_2_x_no_rt", "rt_2_x_no_rt_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    ),
    om_model = ifelse(
      scenario %in% c("no_rt", "no_rt_x_rt_2", "no_rt_x_rt_2_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    )
  )%>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_com_f, re_rec_f, re_F_5, re_F),
    names_to = "variable",
    values_to = "value",
    names_transform = list(
      variable = ~recode(
        .x,
        "re_com_f" = "Commercial F",
        "re_rec_f" = "Recreational F",
        "re_F_5" = "Red Tide F",
        "re_F" = "Total F"
      )
  )) %>%
  filter(year_type == "Red Tide") %>%
  ggplot(aes(scenario, value)) +
  geom_boxplot(aes(color = variable)) +
  theme_bw()+ 
  labs(color = "EM", fill = "EM", x = "Year", y = "Estimation Error (MAPE)")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Testing more plots

::: panel-tabset

### Relative error

```{r}

EM_means_re %>%
mutate(
    em_model = ifelse(
      scenario %in% c("no_rt", "rt_2_x_no_rt", "rt_2_x_no_rt_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    ),
    om_model = ifelse(
      scenario %in% c("no_rt", "no_rt_x_rt_2", "no_rt_x_rt_2_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    )
  )%>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_com, re_rec, re_dead_5, re_removals),
    names_to = "variable",
    values_to = "value",
    names_transform = list(
      variable = ~recode(
        .x,
        "re_com" = "Commercial Catch",
        "re_rec" = "Recreational Catch",
        "re_dead_5" = "Red Tide Dead",
        "re_removals" = "Total Removals"
      )
  )) %>%
  ggplot(aes(year, value)) +
  geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  stat_summary(fun = mean, geom = "line") +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", alpha = 0.3) +
  facet_grid(variable~scenario, scales = "free") +
  theme_bw()+ 
  #coord_cartesian(xlim = c(2017, 2025)) +
  labs(color = "EM", fill = "EM", x = "Year", y = "Relative Error")

```

### Ratio

```{r}

EM_means_ratio <- summary$ts %>%
  filter(
    str_detect(model_run, "_EM_2047")) %>%
  rowwise()%>%
  mutate(commercial = sum(retainB_1, retainB_2), recreational = retainB_4, com_f = sum(F_1, F_2), rec_f = F_4) %>%
  left_join(OM_means, by = c("year", "scenario", "iteration")) %>%
  group_by(scenario, iteration, year) %>%
  mutate(
    re_Recruit_0 = ifelse(
      is.na(Recruit_0 / OM_Recruit_0),
      0,
    Recruit_0/OM_Recruit_0
    ),
    #this put zeros back in.
    re_F_5 = ifelse(is.na((F_5) / OM_F_5), 1, (F_5) /
                      OM_F_5),
    re_SpawnBio = ifelse(is.na((SpawnBio) / OM_SpawnBio), 1, (SpawnBio) /
                      OM_SpawnBio),
        re_com = ifelse(is.na((commercial) / OM_com), 1, (commercial) /
                      OM_com),
        re_rec = ifelse(is.na((recreational) / OM_rec), 1, (recreational) /
                      OM_rec),
        re_dead_5 = ifelse(is.na((deadB_5) / OM_dead_5), 1, (deadB_5) /
                      OM_dead_5),
        re_com_f = ifelse(is.na((com_f) / OM_com_f), 1, (com_f) /
                      OM_com_f),
        re_rec_f = ifelse(is.na((rec_f) / OM_rec_f), 1, (rec_f) /
                      OM_rec_f),        
        re_abundance = ifelse(is.na((Bio_smry) / OM_abundance), 1, (Bio_smry) /
                      OM_abundance),
        re_removals = sum(re_com, re_rec, re_dead_5),
    end_year = as.numeric(str_extract(model_run, "\\d{4}$"))+3,
    years_until_terminal = end_year - year
  )

EM_means_ratio %>%
mutate(
    em_model = ifelse(
      scenario %in% c("no_rt", "rt_2_x_no_rt", "rt_2_x_no_rt_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    ),
    om_model = ifelse(
      scenario %in% c("no_rt", "no_rt_x_rt_2", "no_rt_x_rt_2_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    )
  )%>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_com, re_rec, re_dead_5),
    names_to = "variable",
    values_to = "value",
    names_transform = list(
      variable = ~recode(
        .x,
        "re_com" = "Commercial Catch",
        "re_rec" = "Recreational Catch",
        "re_dead_5" = "Red Tide Dead"
      )
  )) %>%
  ggplot(aes(year, value)) +
  geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  stat_summary(fun = mean, geom = "line") +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", alpha = 0.3) +
  facet_grid(variable~scenario, scales = "free") +
  theme_bw()+ 
  coord_cartesian(ylim = c(0,3)) +
  #coord_cartesian(xlim = c(2017, 2025)) +
  labs(color = "EM", fill = "EM", x = "Year", y = "Ratio EM:OM")

```

### grey lines for iteration, mean black

```{r}
EM_means_ratio %>%
mutate(
    em_model = ifelse(
      scenario %in% c("no_rt", "rt_2_x_no_rt", "rt_2_x_no_rt_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    ),
    om_model = ifelse(
      scenario %in% c("no_rt", "no_rt_x_rt_2", "no_rt_x_rt_2_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    )
  )%>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_com, re_rec, re_dead_5),
    names_to = "variable",
    values_to = "value",
    names_transform = list(
      variable = ~recode(
        .x,
        "re_com" = "Commercial Catch",
        "re_rec" = "Recreational Catch",
        "re_dead_5" = "Red Tide Dead"
      )
  )) %>%
  ggplot(aes(year, value)) +
  geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  geom_line(aes(year, value, group = iteration), color = "grey") + 
  stat_summary(fun = mean, geom = "line") +
  #stat_summary(fun.data = mean_cl_normal, geom = "ribbon", alpha = 0.3) +
  geom_hline(yintercept = 1) + 
  facet_grid(variable~scenario, scales = "free") +
  theme_bw()+ 
  coord_cartesian(ylim = c(0,3)) +
  #coord_cartesian(xlim = c(2017, 2025)) +
  labs(color = "EM", fill = "EM", x = "Year", y = "Ratio EM:OM")

```

### zoom in 

```{r}
EM_means_ratio %>%
mutate(
    em_model = ifelse(
      scenario %in% c("no_rt", "rt_2_x_no_rt", "rt_2_x_no_rt_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    ),
    om_model = ifelse(
      scenario %in% c("no_rt", "no_rt_x_rt_2", "no_rt_x_rt_2_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    )
  )%>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_com, re_rec, re_dead_5),
    names_to = "variable",
    values_to = "value",
    names_transform = list(
      variable = ~recode(
        .x,
        "re_com" = "Commercial Catch",
        "re_rec" = "Recreational Catch",
        "re_dead_5" = "Red Tide Dead"
      )
  )) %>%
  ggplot(aes(year, value)) +
  geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  geom_line(aes(year, value, group = iteration), color = "grey") + 
  stat_summary(fun = mean, geom = "line") +
  #stat_summary(fun.data = mean_cl_normal, geom = "ribbon", alpha = 0.3) +
  geom_hline(yintercept = 1, linetype = "dashed") + 
  facet_grid(variable~scenario, scales = "free") +
  theme_bw()+ 
  coord_cartesian(ylim = c(0,3)) +
  coord_cartesian(xlim = c(2017, 2025)) +
  labs(color = "EM", fill = "EM", x = "Year", y = "Ratio EM:OM")

```

### other parameters

```{r}
EM_means_ratio %>%
mutate(
    em_model = ifelse(
      scenario %in% c("no_rt", "rt_2_x_no_rt", "rt_2_x_no_rt_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    ),
    om_model = ifelse(
      scenario %in% c("no_rt", "no_rt_x_rt_2", "no_rt_x_rt_2_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    )
  )%>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_SpawnBio, re_Recruit_0, re_abundance),
    names_to = "variable",
    values_to = "value",
    names_transform = list(
      variable = ~recode(
        .x,
        "re_SpawnBio" = "SSB",
        "re_Recruit_0" = "Recruits",
        "re_abundance" = "Abundance"
      )
  )) %>%
  ggplot(aes(year, value)) +
  geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  geom_line(aes(year, value, group = iteration), color = "grey") + 
  stat_summary(fun = mean, geom = "line") +
  #stat_summary(fun.data = mean_cl_normal, geom = "ribbon", alpha = 0.3) +
  geom_hline(yintercept = 1, linetype = "dashed") + 
  facet_grid(variable~scenario, scales = "free") +
  theme_bw()+ 
  coord_cartesian(ylim = c(0,3)) +
  #coord_cartesian(xlim = c(2017, 2025)) +
  labs(color = "EM", fill = "EM", x = "Year", y = "Ratio EM:OM")

```

### zoom in, other parameters

```{r}
EM_means_ratio %>%
mutate(
    em_model = ifelse(
      scenario %in% c("no_rt", "rt_2_x_no_rt", "rt_2_x_no_rt_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    ),
    om_model = ifelse(
      scenario %in% c("no_rt", "no_rt_x_rt_2", "no_rt_x_rt_2_high"),
      "No Red Tide",
      ifelse(
        grepl("high", scenario),
        "2 Years High Red Tide",
        "2 Years Red Tide"
      )
    )
  )%>%
  # Pivot the data longer
  pivot_longer(
    cols = c(re_SpawnBio, re_Recruit_0, re_abundance),
    names_to = "variable",
    values_to = "value",
    names_transform = list(
      variable = ~recode(
        .x,
        "re_SpawnBio" = "SSB",
        "re_Recruit_0" = "Recruits",
        "re_abundance" = "Abundance"
      )
  )) %>%
  ggplot(aes(year, value)) +
  geom_vline(xintercept = c(2005, 2014, 2018, 2021), linetype = "dashed", color = "gray") +
  geom_line(aes(year, value, group = iteration), color = "grey") + 
  stat_summary(fun = mean, geom = "line") +
  #stat_summary(fun.data = mean_cl_normal, geom = "ribbon", alpha = 0.3) +
  geom_hline(yintercept = 1, linetype = "dashed") + 
  facet_grid(variable~scenario, scales = "free") +
  theme_bw()+ 
  coord_cartesian(ylim = c(0,3)) +
  coord_cartesian(xlim = c(2000, 2025)) +
  labs(color = "EM", fill = "EM", x = "Year", y = "Ratio EM:OM")

```

:::


## Testing ratios

I think something is off about the EM:OM ratio in the previous plots so I'm going to try using the ratio_df from earlier.  

::: panel-tabset

### Misc. TS Variables


```{r}

ratio_df %>%
  filter(str_detect(model_run, "_EM_2047") | str_detect(model_run, "_OM")) %>%
  mutate(
    em_model = ifelse(
      scenario %in% c("no_rt", "rt_2_x_no_rt", "rt_2_x_no_rt_high"),
      "No Red Tide",
      ifelse(grepl("high", scenario), "2 Years High Red Tide", "2 Years Red Tide")
    ),
    om_model = ifelse(
      scenario %in% c("no_rt", "no_rt_x_rt_2", "no_rt_x_rt_2_high"),
      "No Red Tide",
      ifelse(grepl("high", scenario), "2 Years High Red Tide", "2 Years Red Tide")
    )
  ) %>% 
  # Pivot the data longer
  pivot_longer(
    cols = c(
      SpawnBio_ratio,
      Recruit_0_ratio,
      SPRratio_ratio,
      rec_dev_ratio
    ),
    names_to = "variable",
    values_to = "value",
    names_transform = list(
      variable = ~ recode(
        .x,
        "SpawnBio_ratio" = "SSB",
        "Recruit_0_ratio" = "Recruits",
        "SPRratio_ratio" = "SPR Ratio",
        "rec_dev_ratio" = "Rec. Devs."
      )
    )
  ) %>%
  ggplot(aes(year, value)) +
  geom_vline(
    xintercept = c(2005, 2014, 2018, 2021),
    linetype = "dashed",
    color = "gray"
  ) +
  geom_line(aes(year, value, group = iteration), color = "grey") +
  stat_summary(fun = median, geom = "line") +
  #stat_summary(fun.data = mean_cl_normal, geom = "ribbon", alpha = 0.3) +
  geom_hline(yintercept = 1, linetype = "dashed") +
  facet_grid(variable ~ scenario, scales = "free") +
  theme_bw() +
  coord_cartesian(xlim = c(2000, 2025)) +
  labs(color = "EM",
       fill = "EM",
       x = "Year",
       y = "Ratio EM:OM")

```


### TS F


```{r}

ratio_df %>%
  filter(str_detect(model_run, "_EM_2047") | str_detect(model_run, "_OM")) %>%
  mutate(
    em_model = ifelse(
      scenario %in% c("no_rt", "rt_2_x_no_rt", "rt_2_x_no_rt_high"),
      "No Red Tide",
      ifelse(grepl("high", scenario), "2 Years High Red Tide", "2 Years Red Tide")
    ),
    om_model = ifelse(
      scenario %in% c("no_rt", "no_rt_x_rt_2", "no_rt_x_rt_2_high"),
      "No Red Tide",
      ifelse(grepl("high", scenario), "2 Years High Red Tide", "2 Years Red Tide")
    )
  ) %>% 
  # Pivot the data longer
  pivot_longer(
    cols = c(
      F_1_ratio,
      F_2_ratio,
      F_4_ratio,
      F_5_ratio
    ),
    names_to = "variable",
    values_to = "value",
    names_transform = list(
      variable = ~ recode(
        .x,
        "F_1_ratio" = "F_1",
        "F_2_ratio" = "F_2",
        "F_4_ratio" = "F_4",
        "F_5_ratio" = "F_5"
      )
    )
  ) %>%
  ggplot(aes(year, value)) +
  geom_vline(
    xintercept = c(2005, 2014, 2018, 2021),
    linetype = "dashed",
    color = "gray"
  ) +
  geom_line(aes(year, value, group = iteration), color = "grey") +
  stat_summary(fun = median, geom = "line") +
  #stat_summary(fun.data = mean_cl_normal, geom = "ribbon", alpha = 0.3) +
  geom_hline(yintercept = 1, linetype = "dashed") +
  facet_grid(variable ~ scenario, scales = "free") +
  theme_bw() +
  coord_cartesian(xlim = c(2000, 2025)) +
  labs(color = "EM",
       fill = "EM",
       x = "Year",
       y = "Ratio EM:OM")

```


:::