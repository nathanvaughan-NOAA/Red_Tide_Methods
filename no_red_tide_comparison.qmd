---
title: "no_red_tide_comparison"
format: html
editor: visual
---

## Comparing no_red_tide and red_tide for Red Grouper

I'm going to copy the Red Grouper SS3 run for the first OM and then set the Fleet 5 (red tide) catch to zero as a second OM. Then copy both for EMs and run SSMSE to compare the scenarios where the true scenario has red tide vs. the true secenario doesn't have red tides.

Some of the chunks edit data and rerun SS which can take a while, these chunks are set to `eval = FALSE` which should be removed or set to TRUE if this is your first time running this script.  

## Set-up

Before running any code, I cloned the merge_catch_bias repo as the SSMSE version and reverted my r4ss to version 1.49.3.

```{r}
# Install and load packages
# Might need to uncomment next line to install packages
# options(download.file.method = "libcurl")
# remotes::install_github("r4ss/r4ss") need to edit for previous version
# remotes::install_github("ss3sim/ss3sim")
# remotes::install_github("nmfs-fish-tools/SSMSE")
devtools::load_all("C://Users/apn26/Documents/SSMSE/")  # needs to be the cloned SSMSE repo

library(tidyverse)
packageVersion("r4ss")
packageVersion("ss3sim")
packageVersion("SSMSE")
```

```{r}
# Create a folder for the output in the working directory.
run_SSMSE_dir <- file.path("run_SSMSE_no_red_tide")
dir.create(run_SSMSE_dir)

# Create folders for the OMs and EMs
OM_red_tide_path <- file.path(run_SSMSE_dir, "OM_red_tide")
dir.create(OM_red_tide_path)
OM_no_red_tide_path <- file.path(run_SSMSE_dir, "OM_no_red_tide")
dir.create(OM_no_red_tide_path)
EM_red_tide_path <- file.path(run_SSMSE_dir, "EM_red_tide")
dir.create(EM_red_tide_path)
EM_no_red_tide_path <- file.path(run_SSMSE_dir, "EM_no_red_tide")
dir.create(EM_no_red_tide_path)
```

I manually copied the Red Grouper stock assessment (version_3.30.18_reverseTB_upfore_expdat) into the OM_red_tide folder generated above. 
This is the base red grouper stock assessment, and the scenario where there is red tide.  

Next I need to copy that SS model and alter the no_red_tide file to have no Fleet 5 catch, then refit SS.  Don't forget to change data.ss_new to data_echo.ss_new in the new model run.  

```{r, eval = FALSE}

# make a copy of the base ss model inputs, change Fleet 5 catch to zero, and rerun SS
copy_SS_inputs(dir.old = OM_red_tide_path, dir.new = OM_no_red_tide_path)
no_red_tide_ss <- SS_read(OM_no_red_tide_path)
no_red_tide_ss$dat$catch <- no_red_tide_ss$dat$catch %>%
  mutate(catch = if_else(fleet == 5, 0, catch))
SS_write(no_red_tide_ss, dir = OM_no_red_tide_path, overwrite = TRUE)
get_ss3_exe(dir = OM_no_red_tide_path, version = "v3.30.18")
run(dir = OM_no_red_tide_path, skipfinished = FALSE)
file.rename(from = file.path(OM_no_red_tide_path, "data.ss_new"), to = file.path(OM_no_red_tide_path, "data_echo.ss_new"))


# make a copy of the OMs in their respective EM folders
list_of_files <- list.files(OM_red_tide_path) 
file.copy(file.path(OM_red_tide_path,list_of_files), EM_red_tide_path)
list_of_files <- list.files(OM_no_red_tide_path) 
file.copy(file.path(OM_no_red_tide_path,list_of_files), EM_no_red_tide_path)

```


At this point, I have all the packages ready to go, the OMs and EMs have been copied and set up in specific folders.  The next step will be setting up all the errors.  

## Adding Process Error

First I grab the ctl and dat information from the base OM.  

```{r}

# to get the names of parameter values
ctl<-r4ss::SS_readctl(file.path(OM_red_tide_path, "red_grouper_1986_2017_RedTideFleet.ctl"))
# str(ctl)
# names(ctl)
# rownames(ctl$SR_parms)

dat<-r4ss::SS_readdat(file.path(OM_red_tide_path, "red_grouper_1986_2017_RedTideFleet.dat"))
# names(dat)

```

Then I add the process error using that information.  

```{r}
## Add process error through rec devs ####
# start from a list created by a helper function
template_mod_change<-create_future_om_list()
# add rec devs
rec_dev_specify<-template_mod_change[[1]]
rec_dev_specify$pars<-"rec_devs"
rec_dev_specify$scen<-c("replicate","all") 
rec_dev_specify$input$first_yr_averaging<-ctl$MainRdevYrFirst
rec_dev_specify$input$last_yr_averaging<-ctl$MainRdevYrLast
# The following 2 lines suggest that this change is immediately applied in year
# 101, with no transitory period for using sd 0 to the new sd.
rec_dev_specify$input$last_yr_orig_val<-dat$endyr
rec_dev_specify$input$first_yr_final_val<-dat$endyr+1
rec_dev_specify$input$ts_param<-"sd" 
rec_dev_specify$input$value<-NA
rec_dev_specify

#future OM list
future_OM_list_recdevs<-list(rec_dev_specify)

```

## Adding Observation Error

The argument sample_struct specifies the structure for sampling from the OM (and passing to the EM). The function create_sample_struct can be used to construct a simple sampling structure consistent with an input data file.  

```{r}
datfile<-dat
projyrs<-15
#sample_struct<-create_sample_struct(dat=datfile, nyrs=projyrs)
sample_struct<-create_sample_struct_biased(dat=datfile, nyrs=projyrs)
# LOTS OF WARNINGS/ERRORS, so need to go input by input and enter errors
# By default, create_sample_struct identifies sampling patterns from the 
# historical period of the OM and replicates those patterns in the projection 
# period. Note that length comp (lencomp) includes an NA value for year. 
# This is because no consistent pattern was identified, so the user must 
# define their own input.
names(sample_struct)
# currently includes catch, CPUE, lencomp, agecomp, meanbodywt, MeanSize_at_Age_obs
# discard_data added for red snapper MSE
# EM2OMcatch_bias and EM2OMdiscard_bias added for FES MSE
# Fixed catch added to handle shrimp bycatch or red tide kills externally
```

First we note the number of projected years (`r projyrs`).   Then we let SSMSE create the base sample structure.  We will now go through each type of error and specify how it should work for this model.  

### Landings Error (catch)

For landings error, we need a standard error for each projected year that is the mean of all the standard error from every reported catch since 2000.  We also excluded trap landings since they stopped in 2007 and we excluded red tide because it is episodic.  

```{r}
################
# Landings Error 

sample_struct$catch
table(dat$catch$fleet,dat$catch$catch_se)

#Specify SEs as mean of past 20 yrs of observed catch
sample_struct$catch <- sample_struct$catch %>%
  filter(FltSvy %in% c(1,2,4)) %>% # exclude trap since landings stopped in 2007 & red tide
  rename(fleet = FltSvy) %>% # make fleet column name match
  left_join(filter(dat$catch, year > 2000)) %>% # filter only the years after 2000
  summarise(SE = mean(catch_se), .by = c(Yr, Seas, fleet)) %>% # take the mean of the SE
  rename(FltSvy = fleet) # return the fleet column to SS format

sample_struct$catch

```


### EM2OMcatch_bias Error 

By default, SSMSE sets the structure where all fleets have no bias.  We want to remove the trap and red tide fleets anyways.  

```{r}

#Remove bias for trap fleet and red tide
sample_struct$EM2OMcatch_bias <- filter(sample_struct$EM2OMcatch_bias, FltSvy %in% c(1,2,4))
sample_struct$EM2OMcatch_bias
#Default values of 1 (no bias)

```

### Fixed catch Error

We don't want any error here so it's set to NULL

```{r}
sample_struct$FixedCatch
sample_struct$FixedCatch<-NULL
```

### CPUE Error

If the survey operated in the last two years, then assume yearly operation into the future using the mean of each fleet's standard error after 2000.  

```{r}

# if the survey has operated in 2016 or 2017, assume yearly operation into the future

proj_indecies <- dat$CPUE %>% 
  filter(year > dat$endyr - 2) %>% # Identify the indecies that have CPUEs in the last 2 years
  distinct(index) # Make a list of those indecies

sample_struct$CPUE <- dat$CPUE %>% 
  filter(index %in% proj_indecies$index) %>% # Filter only the indecies that have CPUEs in the last 2 years
  group_by(index) %>% # group by index
  summarize(SE = mean(se_log[year > 2000], na.rm = TRUE), .groups = "drop") %>% #take the mean of the se_log only for CPUEs after 2000
  rowwise() %>% # go row by row to apply the sumarized SE and index to each year
  mutate(
    projection = list(
      data.frame(
        Yr = (dat$endyr+1):(dat$endyr + projyrs), #the years we want
        Seas = 7, #only one sea
        FltSvy = index, #pulls from the row, duplicates for each year
        SE = SE #pulls from the row, duplicates for each year
      )
    )
  )%>%
  select(projection) %>% # removes the old SE and index rows
  unnest(cols = c(projection)) #takes it out of a nested list format

head(sample_struct$CPUE)

```


### Discards Error

We removed discard error for fleet 3.  

```{r}
table(dat$discard_data$Flt,dat$discard_data$Std_in)
#Fleet 3 is commercial trap, which is no longer active so remove it
sample_struct$discard_data <- sample_struct$discard_data %>% 
  filter(FltSvy != 3)
sample_struct$discard_data
```


### EM2OMdiscard_bias Error 

We removed discard bias error for fleet 3.  

```{r}
#Remove bias for trap fleet 
sample_struct$EM2OMdiscard_bias <- sample_struct$EM2OMdiscard_bias %>% 
  filter(FltSvy != 3)
sample_struct$EM2OMdiscard_bias
#Default values of 1 (no bias)
```

### Lencomp Error  

This process is huge and still needs to be rewritten.  

```{r}
sample_struct$lencomp
table(datfile$lencomp$Seas)   #7
table(datfile$lencomp$Gender) #1
table(datfile$lencomp$Part)   #0, 1, 2
table(datfile$lencomp$FltSvy,datfile$lencomp$Part)  
# note: month = 7 and sex = 1
sample_struct$lencomp<-sample_struct$lencomp[0,] # reset dataframe
for(i in  unique(dat$lencomp$FltSvy)){ # unique fleet/surveys w len comp data 
  sublc20<-dat$lencomp[dat$lencomp$FltSvy ==i & dat$lencomp$Yr > dat$endyr-20,] # get subset of lencomps over past 20 yrs
  sublc2<-dat$lencomp[dat$lencomp$FltSvy ==i & dat$lencomp$Yr > dat$endyr-2,] # get subset of lencomps over past 2 yrs
  if(nrow(sublc2)>0){ # only assume projection values if they have been observed in the last 2 years, otherwise assume truncated data series
    
    sublc20_P0<-sublc20[sublc20$Part==0,] # get combined (Part==0) lencomp projections
    if(nrow(sublc20_P0)>0){ # only project retained catch if observed over past 20 yrs
      if((dat$endyr+1) %in% sublc20_P0$Yr){ 
        Nsamp_t<- c(sublc20_P0$Nsamp[sublc20_P0$Yr==TermYr], rep(mean(sublc20_P0$Nsamp), projyrs-1)) # use terminal year value if present in dat file
      }else{
        Nsamp_t<- rep(mean(sublc20_P0$Nsamp), projyrs) # otherwise, use mean Nsamps observed over past 20 yrs for all proj yrs
      }
      # get retained or combined lencomp projection dataframe 
      kept0_lf<-data.frame(Yr=(dat$endyr+1):(dat$endyr+projyrs), Seas=rep(7, projyrs), FltSvy=rep(i, projyrs),
                           Sex=rep(0, projyrs), Part=rep(0,projyrs), Nsamp=Nsamp_t)
      
    }else{
      kept0_lf<-NULL # make retained/combined dataframe empty if no observations for fleet i
    } #end if-else retained/combined lencomp data
    
    sublc20_P1<-sublc20[sublc20$Part==1,] # get discarded lencomps when exist
    
    if(nrow(sublc20_P1)>0){
      frq1<-round(10/nrow(sublc20_P1)) # take average frequency of discard lengcomps as observed over past 10 yrs
      Yr_t<-seq(from=dat$endyr+1, to=dat$endyr+projyrs, by=frq1) # proj discard lencomp observations w same frequency 
      # get discard projected lencomps dataframe
      disc_lf<-data.frame(Yr=Yr_t, Seas=rep(7, length(Yr_t)), FltSvy=rep(i, length(Yr_t)), Sex=rep(0, length(Yr_t)),
                          Part=rep(1,length(Yr_t)), Nsamp=rep(mean(sublc20_P1$Nsamp), length(Yr_t)) ) 
    }else{
      disc_lf<-NULL # make discard dataframe empty if no discard observations for fleet i
    } #end if-else discard lencomp data
    
    sublc20_P2<-sublc20[sublc20$Part==2,] # get retained (Part==2) lencomp projections
    if(nrow(sublc20_P2)>0){ # only project retained catch if observed over past 20 yrs
      if((dat$endyr+1) %in% sublc20_P2$Yr){ 
        Nsamp_t<- c(sublc20_P2$Nsamp[sublc20_P2$Yr==TermYr], rep(mean(sublc20_P2$Nsamp), projyrs-1)) # use terminal year value if present in dat file
      }else{
        Nsamp_t<- rep(mean(sublc20_P2$Nsamp), projyrs) # otherwise, use mean Nsamps observed over past 20 yrs for all proj yrs
      }
      # get retained or combined lencomp projection dataframe 
      kept2_lf<-data.frame(Yr=(dat$endyr+1):(dat$endyr+projyrs), Seas=rep(7, projyrs), FltSvy=rep(i, projyrs),
                           Sex=rep(0, projyrs), Part=rep(2,projyrs), Nsamp=Nsamp_t)
      
    }else{
      kept2_lf<-NULL # make retained/combined dataframe empty if no observations for fleet i
    } #end if-else retained/combined lencomp data
    
    sample_struct$lencomp <- rbind(sample_struct$lencomp, disc_lf, kept0_lf,kept2_lf) # append discard and retained/combined lencomp dataframes for fleet i to the previous fleets
    
  }# end if statement
}# end length section
sample_struct$lencomp
```

### Agecomp Error

Also a huge chunk that I'd like to rewrite.  

```{r}
sample_struct$agecomp
table(datfile$agecomp$Seas)    # 7
table(datfile$agecomp$Gender)  # 1
table(datfile$agecomp$Part)    # 2
table(datfile$agecomp$Ageerr)  # 1 
table(datfile$agecomp$Lbin_lo) # -1
table(datfile$agecomp$Lbin_hi) # -1
# Year values that are before start year or after end year are excluded from model, so the easiest way to include provisional data in a data file is to put a negative sign on its year value.
# negative year age comps are ignored from projections
# note all sex==1, all Part == 2, all all ageerr=1, Lbin_lo=Lbin_hi=-1
sample_struct$agecomp<-sample_struct$agecomp[0,] # reset dataframe
for(i in  unique(dat$agecomp$FltSvy)){ # unique fleet/surveys w len comp data 
   subac20<-dat$agecomp[dat$agecomp$FltSvy ==i & dat$agecomp$Yr > dat$endyr-20,] # get subset of agecomps over past 20 yrs
   subac2<-dat$agecomp[dat$agecomp$FltSvy ==i & dat$agecomp$Yr > dat$endyr-2,] # get subset of agecomps over past 2 yrs
   if(nrow(subac2)>0){ # only assume projection values if they have been observed in the last 2 years, otherwise assume truncated data series
     # create age sampling projection data frame
     agec<-data.frame(Yr=(dat$endyr+1):(dat$endyr+projyrs), Seas=rep(subac2$Seas[1], projyrs), 
                      FltSvy=rep(i, projyrs), Sex=rep(1, projyrs), Part=rep(2,projyrs), 
                      Ageerr=rep(1,projyrs), Lbin_lo=rep(-1,projyrs), Lbin_hi=rep(-1,projyrs),
                      Nsamp=rep(mean(subac20$Nsamp),projyrs) )
     
     sample_struct$agecomp <- rbind(sample_struct$agecomp, agec) # append survey i agecomp dataframe to previous fleets
     
   }#end if projection 
} #end i forloop for agecomp section
sample_struct$agecomp
```


### Meanbody Wt Error

Don't change anything, keep NA.  

```{r}
sample_struct$meanbodywt
```

### Mean Size At Age Error

Don't change anything, keep NA.  

```{r}
sample_struct$MeanSize_at_Age_obs
```

### Finalize Errors

```{r}
# Adjust sample structure for no_red_tide scenario
sample_struct_no_red_tide <- sample_struct
sample_struct_no_red_tide$catch <- sample_struct_no_red_tide$catch %>% 
  filter(FltSvy != 5)
# create a list of sample structures for each OM/MP run. 
sample_struct_list_all <- list("red_tide" = sample_struct, "no_red_tide" = sample_struct_no_red_tide)
```



##  Examine the management procedure used
 
1. Conduct a stock assessment every 3 years to get stock status.
2. Forecast from this stock assessment using the SS forecast file to get future catch. 
3. Put this forecasted catch (without implementation error, in the case of this example) back into the OM. Extend the OM forward in time to get the true values for the population.
 
Let's take a look at step 2 in the management procedure, which is implemented using the forecasting module in SS. We will examine the forecast file to better understand how catches will be forecasted from the assessment. We will use the assessment. For a full MSE analysis, it is likely that multiple management procedures would be compared.

```{r}

fore<-r4ss::SS_readforecast(file=file.path(OM_red_tide_path, "forecast.ss"), verbose=FALSE)
fore$Forecast
#fore$Forecast = 1 means our forecasts from the assessment will use fishing 
#mortality (F) to achieve an FSPR value. 

fore$Btarget
#Based on fore$Btarget, the relative biomass target is 30% of unfished spawning 
#stock biomass. 

#Note also that the control rule fore$BforconstantF and fore$BfornoF values 
#are set low to make it unlikely that they will be used (these parameters are
#used for a ramp harvest control rule, which we do not want to use here):
fore$BforconstantF
fore$BfornoF

#fore$Flimitfraction is set to 1 so that the forecasted catch is set equal to the 
#overfishing limit (for simplicity):
fore$Flimitfraction

#The number of forecast years:
fore$Nforecastyrs
```

## Run SSMSE

```{r}
start_time <- Sys.time()

run_res_path <- file.path(run_SSMSE_dir, "results")
 dir.create(run_res_path)
res<-run_SSMSE(
  scen_name_vec=c('red_tide', "no_red_tide"), # name of the scenario
  out_dir_scen_vec = run_res_path, # directory in which to run the scenario
  iter_vec = c(3,3), # run with 3 iterations each
  OM_name_vec = NULL, # specify directories instead
  OM_in_dir_vec = c(OM_red_tide_path, OM_no_red_tide_path), # OM files
  EM_name_vec = NULL, # specify directories instead
  EM_in_dir_vec = c(EM_red_tide_path, EM_red_tide_path), # EM files
  run_EM_last_yr = TRUE,
  MS_vec = c("EM", "EM"), # The management strategy is specified in the EM
  nyrs_vec = c(projyrs, projyrs), # Years to project OM forward
  nyrs_assess_vec = c(3, 3), # Years between assessments
  future_om_list = future_OM_list_recdevs,
  run_parallel = TRUE, # Run iterations in parallel
  sample_struct_list = sample_struct_list_all, # How to sample data for running the EM.
  sample_struct_hist_list = NULL, # because this is null, will just use sampling
  # as in the current OM data file for the historical period.
  seed = 12345
) # Set a fixed integer seed that allows replication

end_time <- Sys.time()
end_time - start_time

```



```{r}
summary <- SSMSE_summary_all(run_res_path)

########################## 
# Create folder for plots

if(!file.exists(paste0(run_res_path,"/plots/"))) dir.create(paste0(run_res_path,"/plots/"))

##############################
# Summarize Timeseries Results

colnames(summary$ts)
#ts includes SSB, recruitment, retained biomass per fleet, retained numbers per fleet, 
#dead biomass per fleet, dead numbers per fleet, F per fleet, SPRratio, and rec_devs

# SSB by year and model run (subset for OM vs initEM)
p_SSB<-ggplot(data = subset(summary$ts, model_run %in% c(unique(summary$ts$model_run)[c(8:9)])), 
              ggplot2::aes(x = year, y = SpawnBio)) +
  geom_vline(xintercept = dat$endyr, color = "gray") +
  geom_line(ggplot2::aes(linetype = as.character(iteration), color = model_run))+
  xlim(min(summary$ts$year),(max(dat$endyr)+projyrs)) + 
  scale_color_brewer(palette="Set1") +
  scale_linetype_manual(values = rep("solid", 50)) +
  guides(linetype = FALSE) +
  facet_wrap(. ~ scenario) +
  labs(x = "Year",y="Spawning Stock Biomass (Relative number of eggs)") + 
  theme_classic()
p_SSB
ggsave(paste0(run_res_path,"/plots/_ts_SSB_OMvsinitEM.jpg"),width=6.5,height=4)
```